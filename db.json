{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1515072990000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1515072990000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1515072990000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1515072990000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1515072990000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1515072990000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1515072990000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1515072990000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1515072990000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1515072990000},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1515072990000},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1515072990000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1515072990000},{"_id":"themes/next/_config.yml","hash":"fd9b8ea572826bf7cbad267d169af36f6b9dd03f","modified":1521622110930},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1515072990000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1515072990000},{"_id":"source/_posts/Android之自定义控件——Canvas绘制参考.md","hash":"ff9de6ebc2dd14304cebba222d6092dde81561be","modified":1521619848459},{"_id":"source/_posts/Android之自定义控件——View测量,布局,绘制.md","hash":"e42d3117bf24cef3f23e5c0bd8d6b130931c5ce9","modified":1521619846907},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1515072990000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1515072990000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1515072990000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1515072990000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1515072990000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1515072990000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1515072990000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1515072990000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1515072990000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1515072990000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1515072990000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1515072990000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1515072990000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1515072990000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1515072990000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1515072990000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1515072990000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1515072990000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1515072990000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1515072990000},{"_id":"themes/next/layout/_layout.swig","hash":"467de068d46c7f944bcac196ca1cd1155247fd58","modified":1521623363210},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1515072990000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1515072990000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1515072990000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1515072990000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1515072990000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1515072990000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1515072990000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1515072990000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1515072990000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1515072990000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1515072990000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1515072990000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1515072990000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1515072990000},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"4294af608777f89fb44c59d203a9caafec87e72d","modified":1521622163834},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1515072990000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1515072990000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1515072990000},{"_id":"themes/next/layout/_macro/post.swig","hash":"65b2cff33e223e35cbb73e2b5b54cb9e9a569e15","modified":1521622331761},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1515072990000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1515072990000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1515072990000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1515072990000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1515072990000},{"_id":"themes/next/layout/_partials/head.swig","hash":"08ac93bb03448ed595b26344831d2fcacc4a7ca7","modified":1521622033162},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1515072990000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1515072990000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1515072990000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1515072990000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1515072990000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1515072990000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1515072990000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1515072990000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1515072990000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1515072990000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1515072990000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1515072990000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1515072990000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1515072990000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1515072990000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1515072990000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1515072990000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1515072990000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1515072990000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1515072990000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1515072990000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1515072990000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1515072990000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1515072990000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1515072990000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1515072990000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515072990000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1515072990000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1515072990000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515072990000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1515072990000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1515072990000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1515072990000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1515072990000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1515072990000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1515072990000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1515072990000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1515072990000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1515072990000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1515072990000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1515072990000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1515072990000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1515072990000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1515072990000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1515072990000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1515072990000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1515072990000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1515072990000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1515072990000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1515072990000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1515072990000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1515072990000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1515072990000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1515072990000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1515072990000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1515072990000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1515072990000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1515072990000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1515072990000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1515072990000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1515072990000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c01ae2e4235083b6730f9e4a72752bd27376460f","modified":1521622575443},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1515072990000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1515072990000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1515072990000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1515072990000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1515072990000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1515072990000},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1521621170154},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1515072990000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1515072990000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1515072990000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1515072990000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1515072990000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1515072990000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1515072990000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1515072990000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1515072990000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1515072990000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1515072990000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1515072990000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1515072990000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1515072990000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1515072990000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1515072990000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1515072990000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1515072990000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1515072990000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1515072990000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1515072990000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"e954bf95842945b196bbb0de7b8098950a780129","modified":1521622242241},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"36a72cc1d45a13e8ddbe29e5e1f2d893c6eac253","modified":1521622384699},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515072990000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1515072990000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1515072990000}],"Category":[{"name":"android 总结","_id":"cjf0v9p0c0002m84l8t19pvn3"}],"Data":[],"Page":[],"Post":[{"title":"Canvas 绘制","_content":"# Canvas 绘制 #\n\n\t目录:\n\t\t1. 图片文字绘制\n\t\t2. 零散内容绘制和画布调整\n\n<!-- more -->\n---\n## Canvas图片文字绘制\n\n    概要:\n        1. 绘制图片\n        2. 绘制文字\n\n### 1. 绘制图片\n\n#### 矢量(drawPicture)\n警告:需要关闭硬件加速.\n\n- 矢量图绘制就是记录Canvas绘制的内容. \n- Picture的相关函数\n\n        - getWidth\\height():得到宽高\n        - beginRecording(int width,int height):开始录制,return Canvas;\n        - endRecording():结束录制;\n        - draw(Canvas canvas):绘制矢量图;\n    \n- 矢量图的绘制有以下三种方式:\n    1. mPic.draw(canvas);\n\n        - 低版本**影响canvas的状态**,一般不使用;\n\n    2. canvas.drawPicture(mPic);\n        - **不影响canvas状态,可以设置显示矢量图的区域矩形大小,完全压缩显示.**\n                \n                public void drawPicture (Picture picture)\n                \n                public void drawPicture (Picture picture, Rect dst)\n                \n                public void drawPicture (Picture picture, RectF dst)                \n                \n    3. picture → pictureDrawable → pictureDrawable.draw(canvas),**不会缩放,按显示区域大小显示一部分**;\n\n            // 包装成为Drawable\n            PictureDrawable drawable = new PictureDrawable(mPicture);\n            // 设置绘制区域 -- 注意此处所绘制的实际内容不会缩放\n            drawable.setBounds(0,0,250,mPicture.getHeight());\n            // 绘制\n            drawable.draw(canvas);\n            \n\n#### 位图(drawBitmap)\n可能会消耗大量的内存,或者会造成内存泄露;\n首先获得bitmap,然后进行绘制.\n\n1. 获取\n    1. 资源文件(drawable/mipmap/raw):\n            \n            Bitmap bitmap = BitmapFactory.decodeResource\n            (mContext.getResources(),R.raw.bitmap);\n    2. 资源文件(assets):\n    \n            Bitmap bitmap=null;\n            try {\n                InputStream is = mContext.getAssets()\n                .open(\"bitmap.png\");\n                bitmap = BitmapFactory.decodeStream(is);\n                is.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n    3. 内存卡文件:\n    \n            Bitmap bitmap = BitmapFactory\n                .decodeFile(\"/sdcard/.../bitmap.png\");\n    4. 网络文件:\n    \n            // 此处省略了获取网络输入流的代码\n            Bitmap bitmap = BitmapFactory.decodeStream(is);\n            is.close();\n\n2. 绘制\n    \n        public void drawBitmap \n        1. (Bitmap bitmap, Matrix matrix, Paint paint)\n        2. (Bitmap bitmap, float left, float top, Paint paint)\n        3. (Bitmap bitmap, Rect src, Rect dst, Paint paint)\n        4. (Bitmap bitmap, Rect src, RectF dst, Paint paint)\n\t\n\t    1. 默认绘制起点为原点.\n\t        `canvas.drawBitmap(bitmap,new Matrix(),new Paint());`\n\t    2. 确定一个绘制起点坐标.\n\t    3. 4.指定图片的绘制矩形区域和图片在屏幕上的绘制矩形区域,当前者宽/高度>后者宽/高度的情况下会压缩.\n\n        canvas.translate(mWidth/2,mHeight/2);\n        // 指定图片绘制区域(左上角的四分之一)\n        Rect src = new Rect(0,0,bitmap.getWidth()/2,bitmap.getHeight()/2);\n        // 指定图片在屏幕上显示的区域\n        Rect dst = new Rect(0,0,200,400);\n        // 绘制图片\n        canvas.drawBitmap(bitmap,src,dst,null);\n\n    \t4. 注:可以控制两个区域的大小来完成某个动画.\n\n### 2. 绘制文字\n    \n    画笔Paint文本相关函数:\n    色彩\tsetColor,setARGB,setAlpha  设置颜色，透明度\n    大小\tsetTextSize\t               设置文本字体大小\n    字体\tsetTypeface\t               设置或清除字体样式\n    样式\tsetStyle\t               填充描边等\n    对齐\tsetTextAlign\t           左,居中,右\n    测量\tmeasureText\t               测量文本大小\n    \n    (注意:measureText()在设置完文本各项参数后调用)\n   \n1. 指定文本基线位置(x,y)\n\n\n        public void drawText \n        (String text, float x, float y, Paint paint)\n        (String text, int start, int end, float x, float y, Paint paint)\n        (CharSequence text, int start, int end, float x, float y, Paint paint)\n        (char[] text, int index, int count, float x, float y, Paint paint)\n\n\n    * 截取的字符串的index∈[start,end),index从0开始,\n    * count指截取的char字符数;\n    \n2. 指定每个文字的位置(不建议使用)\n\n        public void drawPosText \n        (String text, float[] pos, Paint paint)\n        (char[] text, int index, int count, float[] pos, Paint paint)\n        \n    * 例:\n        \n            canvas.drawPosText(str,new float[]{\n                  100,100,    // 第一个字符位置\n                  200,200,    // 第二个字符位置\n                  300,300,    // ...\n                  400,400,\n                  500,500},\n            textPaint);\n    \n    * 缺点:\n        1. 必须指定所有字符位置，否则直接crash掉，反人类设计\n        2. 性能不佳，在大量使用的时候可能导致卡顿\n        3. 不支持emoji等特殊字符，不支持字形组合与分解        \n       \n       \n3. 指定路径来绘制文字\n\n        public void drawTextOnPath \n        (String text, Path path, float hOffset, float vOffset, Paint paint)\n        (char[] text, int index, int count, Path path, float hOffset, float vOffset, Paint paint)\n\n---\n## Canvas内容绘制\n\n\t- 绘制颜色\n\t\t- 主要函数:drawColor, drawRGB, drawARGB\n\t\t- 使用单一颜色填充整个画布\n\t- 绘制基本形状\n\t\t- 主要函数:drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc\t\n\t\t- 依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧\n\t- 绘制图片\n\t\t- 主要函数:drawBitmap, drawPicture\n\t\t- 绘制位图和图片\n\t- 绘制文本\t\n\t\t- drawText, drawPosText, drawTextOnPath\t\n\t\t- 依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字\n\t- 绘制路径\t\n\t\t- drawPath\t\n\t\t- 绘制路径，绘制贝塞尔曲线时也需要用到该函数\n\t- 顶点操作\t\n\t\t- drawVertices, drawBitmapMesh\t\n\t\t- 通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用\n\t- 画布剪裁\t\n\t\t- clipPath, clipRect\t\n\t\t- 设置画布的显示区域\n\t- 画布快照\t\n\t\t- save, restore, saveLayerXxx, restoreToCount, getSaveCount\t\n\t\t- 依次为 保存当前状态、回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数\n\t- 画布变换\t\n\t\t- translate, scale, rotate, skew\t\n\t\t- 依次为 位移、缩放、 旋转、错切\n\t- Matrix(矩阵)\t\n\t\t- getMatrix, setMatrix, concat\t\n\t\t- 实际上画布的位移，缩放等操作的都是图像矩阵Matrix， 只不过Matrix比较难以理解和使用，故封装了一些常用的方法。\n\n\n### 绘制画布颜色\n\n\tcanvas.drawColor(int color);\n\n#### 绘制一个或者多个坐标点\n\n\tcanvas.drawPoint(200, 200, mPaint);    \n\t //在坐标(200,200)位置绘制一个点\n\tcanvas.drawPoints(new float[]{          \n\t//绘制一组点，坐标位置由float数组指定\n\t      500,500,\n\t      500,600,\n\t      500,700\n\t},mPaint);\n\n### 绘制形状\n\t\n#### 1. 线 ---- 每两个点确定一条线段\n\n\tcanvas.drawLine(300,300,500,600,mPaint);    \n\t// 在坐标(300,300)(500,600)之间绘制一条直线\n\tcanvas.drawLines(new float[]{               \n\t// 绘制一组线 每四数字(两个点的坐标)确定一条线\n\t    100,200,200,200,\n\t    100,300,200,300\n\t},mPaint);\n#### 2. 矩形 ---- 两个对角线确定一个矩形\n\n\t// 第一种\n\tcanvas.drawRect(100,100,800,400,mPaint);\n\t\n\t// 第二种\n\tRect rect = new Rect(100,100,800,400);\n\tcanvas.drawRect(rect,mPaint);\n\t\n\t// 第三种\n\tRectF rectF = new RectF(100,100,800,400);\n\tcanvas.drawRect(rectF,mPaint);\n\n\tRect和RectF的区别在于int 和 float精度,方法也不相同;\n\n#### 3. 圆角矩形 ---- 矩形 + 内切椭圆的两个半径(半径大于矩形一半的宽度按一半来算)\n\n\t// 第一种\n\tRectF rectF = new RectF(100,100,800,400);\n\tcanvas.drawRoundRect(rectF,30,30,mPaint);\n\t\n\t// 第二种\n\tcanvas.drawRoundRect(100,100,800,400,30,30,mPaint);\n\n\n#### 4. 椭圆 ---- 矩形的内切椭圆,只需给定矩形\n\n\t// 第一种\n\tRectF rectF = new RectF(100,100,800,400);\n\tcanvas.drawOval(rectF,mPaint);\n\t\n\t// 第二种\n\tcanvas.drawOval(100,100,800,400,mPaint);\n\n\n#### 5. 圆 ---- 圆心 + 半径\n\n\tcanvas.drawCircle(500,500,400,mPaint);  \n\t// 绘制一个圆心坐标在(500,500)，半径为400 的圆。\n\n#### 6. 圆弧 ---- 矩形内切椭圆 + 开始角度 + 结束角度 + 是否使用中心\n\t// 第一种\n\tpublic void drawArc(@NonNull RectF oval, float startAngle, float sweepAngle, boolean useCenter, @NonNull Paint paint)\n\t    \n\t// 第二种\n\tpublic void drawArc(float left, float top, float right, float bottom, float startAngle,\n\tfloat sweepAngle, boolean useCenter, @NonNull Paint paint)\n\n### Paint\n\n1. 类型setStyle(int style)\n\t1. Paint.Style.STROKE:描边 \n\t2. Paint.Style.FILL:填充\n\t3. Paint.Style.FILL_AND_STROKE:描边+填充\n2. 描边宽度\n\n\t\tpaint.setStrokeWidth(40);\n3. 抗锯齿\n\n\t\tsetAntiAlias(true);\n\n\n### Canvas\n\n\n1. 快照和回滚\n    1. 基础\n\n\t\t快照 : save();\t\t\t//保存画布状态\n\t\t回滚 : restore();\t\t//取出最后一次入栈的图层\n\n\t\tsave就是图层入栈,restore就是图层出栈;\t\n\t\n\t2. 对应的API:\n\t\t\n    \t\tsave()\t\t\t\t把当前的画布的状态进行保存，\n    \t\t或save(saveFlags)\t然后放入特定的栈中\n\n        \t\tALL_SAVE_FLAG\t\t\t\t默认，保存全部状态\n        \t\tCLIP_SAVE_FLAG\t\t\t\t保存剪辑区\n        \t\tCLIP_TO_LAYER_SAVE_FLAG\t\t剪裁区作为图层保存\n        \t\tFULL_COLOR_LAYER_SAVE_FLAG\t保存图层的全部色彩通道\n        \t\tHAS_ALPHA_LAYER_SAVE_FLAG\t保存图层的alpha(不透明度)通道\n        \t\tMATRIX_SAVE_FLAG\t\t\t保存Matrix信息( translate, rotate, scale, skew)\n    \n    \t\tsaveLayerXxx\t\t新建一个图层，并放入特定的栈中\n    \n\t\t\t\tsaveLayerXxx,导致图层叠加造成计算量增倍而过度渲染.\n\n                // 无图层alpha(不透明度)通道\n                public int saveLayer \n                (RectF bounds, Paint paint)\n                (RectF bounds, Paint paint, int saveFlags)\n                (float left, float top, float right, float bottom, Paint paint)\n                (float left, float top, float right, float bottom, Paint paint, int saveFlags)\n                // 有图层alpha(不透明度)通道\n                public int saveLayerAlpha (....,int alpha)\n\n    \t\trestore\t\t\t\t把栈中最顶层的画布状态取出来，\n    \t\t\t\t\t\t\t并按照这个状态恢复当前的画布\n    \n    \t\trestoreToCount\t\t弹出指定位置及其以上所有的状态，\n    \t\t\t\t\t\t\t并按照指定位置的状态进行恢复\n    \n    \t\tgetSaveCount\t\t获取栈中内容的数量(即保存次数)\n\n2. 位移(不断叠加),基于上一次位置的移动.\n\n\t\tcanvas.translate(200,200);\n\t\n3. 旋转(不断叠加),根据**某个中心位置或者原点**旋转**某个角度**;\n\t\t\n\t\tpublic void rotate \n\t\t(float degrees)\n        (float degrees, float px, float py)\n\n4. 缩放(不断叠加),**根据原点位置对x,y方向上的缩放比例,或者根据某个缩放中心的位置控制缩放比例;当缩放比例sx or sy < 0时,会进行翻转相当于中心对称翻转;**\n\n\t\tpublic void scale (float sx, float sy)\n\n\t\tpublic final void scale (float sx, float sy, float px, float py)\n\n\n5. 错切(不断叠加) - skew,**在某个方向上倾斜对应的角度,填入的值为角度对应的tan值.**\n\n\t\tpublic void skew (float sx, float sy)\n\t\t\n\t\t变换之后的值:\n\t\t\tX = x + sx * y\n\t\t\tY = sy * x + y\n\n\n","source":"_posts/Android之自定义控件——Canvas绘制参考.md","raw":"---\ntitle: Canvas 绘制\ncategories: \"android 总结\"\ntags: \n     - android\n     - Canvas \n     - 绘制\n \n---\n# Canvas 绘制 #\n\n\t目录:\n\t\t1. 图片文字绘制\n\t\t2. 零散内容绘制和画布调整\n\n<!-- more -->\n---\n## Canvas图片文字绘制\n\n    概要:\n        1. 绘制图片\n        2. 绘制文字\n\n### 1. 绘制图片\n\n#### 矢量(drawPicture)\n警告:需要关闭硬件加速.\n\n- 矢量图绘制就是记录Canvas绘制的内容. \n- Picture的相关函数\n\n        - getWidth\\height():得到宽高\n        - beginRecording(int width,int height):开始录制,return Canvas;\n        - endRecording():结束录制;\n        - draw(Canvas canvas):绘制矢量图;\n    \n- 矢量图的绘制有以下三种方式:\n    1. mPic.draw(canvas);\n\n        - 低版本**影响canvas的状态**,一般不使用;\n\n    2. canvas.drawPicture(mPic);\n        - **不影响canvas状态,可以设置显示矢量图的区域矩形大小,完全压缩显示.**\n                \n                public void drawPicture (Picture picture)\n                \n                public void drawPicture (Picture picture, Rect dst)\n                \n                public void drawPicture (Picture picture, RectF dst)                \n                \n    3. picture → pictureDrawable → pictureDrawable.draw(canvas),**不会缩放,按显示区域大小显示一部分**;\n\n            // 包装成为Drawable\n            PictureDrawable drawable = new PictureDrawable(mPicture);\n            // 设置绘制区域 -- 注意此处所绘制的实际内容不会缩放\n            drawable.setBounds(0,0,250,mPicture.getHeight());\n            // 绘制\n            drawable.draw(canvas);\n            \n\n#### 位图(drawBitmap)\n可能会消耗大量的内存,或者会造成内存泄露;\n首先获得bitmap,然后进行绘制.\n\n1. 获取\n    1. 资源文件(drawable/mipmap/raw):\n            \n            Bitmap bitmap = BitmapFactory.decodeResource\n            (mContext.getResources(),R.raw.bitmap);\n    2. 资源文件(assets):\n    \n            Bitmap bitmap=null;\n            try {\n                InputStream is = mContext.getAssets()\n                .open(\"bitmap.png\");\n                bitmap = BitmapFactory.decodeStream(is);\n                is.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n    3. 内存卡文件:\n    \n            Bitmap bitmap = BitmapFactory\n                .decodeFile(\"/sdcard/.../bitmap.png\");\n    4. 网络文件:\n    \n            // 此处省略了获取网络输入流的代码\n            Bitmap bitmap = BitmapFactory.decodeStream(is);\n            is.close();\n\n2. 绘制\n    \n        public void drawBitmap \n        1. (Bitmap bitmap, Matrix matrix, Paint paint)\n        2. (Bitmap bitmap, float left, float top, Paint paint)\n        3. (Bitmap bitmap, Rect src, Rect dst, Paint paint)\n        4. (Bitmap bitmap, Rect src, RectF dst, Paint paint)\n\t\n\t    1. 默认绘制起点为原点.\n\t        `canvas.drawBitmap(bitmap,new Matrix(),new Paint());`\n\t    2. 确定一个绘制起点坐标.\n\t    3. 4.指定图片的绘制矩形区域和图片在屏幕上的绘制矩形区域,当前者宽/高度>后者宽/高度的情况下会压缩.\n\n        canvas.translate(mWidth/2,mHeight/2);\n        // 指定图片绘制区域(左上角的四分之一)\n        Rect src = new Rect(0,0,bitmap.getWidth()/2,bitmap.getHeight()/2);\n        // 指定图片在屏幕上显示的区域\n        Rect dst = new Rect(0,0,200,400);\n        // 绘制图片\n        canvas.drawBitmap(bitmap,src,dst,null);\n\n    \t4. 注:可以控制两个区域的大小来完成某个动画.\n\n### 2. 绘制文字\n    \n    画笔Paint文本相关函数:\n    色彩\tsetColor,setARGB,setAlpha  设置颜色，透明度\n    大小\tsetTextSize\t               设置文本字体大小\n    字体\tsetTypeface\t               设置或清除字体样式\n    样式\tsetStyle\t               填充描边等\n    对齐\tsetTextAlign\t           左,居中,右\n    测量\tmeasureText\t               测量文本大小\n    \n    (注意:measureText()在设置完文本各项参数后调用)\n   \n1. 指定文本基线位置(x,y)\n\n\n        public void drawText \n        (String text, float x, float y, Paint paint)\n        (String text, int start, int end, float x, float y, Paint paint)\n        (CharSequence text, int start, int end, float x, float y, Paint paint)\n        (char[] text, int index, int count, float x, float y, Paint paint)\n\n\n    * 截取的字符串的index∈[start,end),index从0开始,\n    * count指截取的char字符数;\n    \n2. 指定每个文字的位置(不建议使用)\n\n        public void drawPosText \n        (String text, float[] pos, Paint paint)\n        (char[] text, int index, int count, float[] pos, Paint paint)\n        \n    * 例:\n        \n            canvas.drawPosText(str,new float[]{\n                  100,100,    // 第一个字符位置\n                  200,200,    // 第二个字符位置\n                  300,300,    // ...\n                  400,400,\n                  500,500},\n            textPaint);\n    \n    * 缺点:\n        1. 必须指定所有字符位置，否则直接crash掉，反人类设计\n        2. 性能不佳，在大量使用的时候可能导致卡顿\n        3. 不支持emoji等特殊字符，不支持字形组合与分解        \n       \n       \n3. 指定路径来绘制文字\n\n        public void drawTextOnPath \n        (String text, Path path, float hOffset, float vOffset, Paint paint)\n        (char[] text, int index, int count, Path path, float hOffset, float vOffset, Paint paint)\n\n---\n## Canvas内容绘制\n\n\t- 绘制颜色\n\t\t- 主要函数:drawColor, drawRGB, drawARGB\n\t\t- 使用单一颜色填充整个画布\n\t- 绘制基本形状\n\t\t- 主要函数:drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc\t\n\t\t- 依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧\n\t- 绘制图片\n\t\t- 主要函数:drawBitmap, drawPicture\n\t\t- 绘制位图和图片\n\t- 绘制文本\t\n\t\t- drawText, drawPosText, drawTextOnPath\t\n\t\t- 依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字\n\t- 绘制路径\t\n\t\t- drawPath\t\n\t\t- 绘制路径，绘制贝塞尔曲线时也需要用到该函数\n\t- 顶点操作\t\n\t\t- drawVertices, drawBitmapMesh\t\n\t\t- 通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用\n\t- 画布剪裁\t\n\t\t- clipPath, clipRect\t\n\t\t- 设置画布的显示区域\n\t- 画布快照\t\n\t\t- save, restore, saveLayerXxx, restoreToCount, getSaveCount\t\n\t\t- 依次为 保存当前状态、回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数\n\t- 画布变换\t\n\t\t- translate, scale, rotate, skew\t\n\t\t- 依次为 位移、缩放、 旋转、错切\n\t- Matrix(矩阵)\t\n\t\t- getMatrix, setMatrix, concat\t\n\t\t- 实际上画布的位移，缩放等操作的都是图像矩阵Matrix， 只不过Matrix比较难以理解和使用，故封装了一些常用的方法。\n\n\n### 绘制画布颜色\n\n\tcanvas.drawColor(int color);\n\n#### 绘制一个或者多个坐标点\n\n\tcanvas.drawPoint(200, 200, mPaint);    \n\t //在坐标(200,200)位置绘制一个点\n\tcanvas.drawPoints(new float[]{          \n\t//绘制一组点，坐标位置由float数组指定\n\t      500,500,\n\t      500,600,\n\t      500,700\n\t},mPaint);\n\n### 绘制形状\n\t\n#### 1. 线 ---- 每两个点确定一条线段\n\n\tcanvas.drawLine(300,300,500,600,mPaint);    \n\t// 在坐标(300,300)(500,600)之间绘制一条直线\n\tcanvas.drawLines(new float[]{               \n\t// 绘制一组线 每四数字(两个点的坐标)确定一条线\n\t    100,200,200,200,\n\t    100,300,200,300\n\t},mPaint);\n#### 2. 矩形 ---- 两个对角线确定一个矩形\n\n\t// 第一种\n\tcanvas.drawRect(100,100,800,400,mPaint);\n\t\n\t// 第二种\n\tRect rect = new Rect(100,100,800,400);\n\tcanvas.drawRect(rect,mPaint);\n\t\n\t// 第三种\n\tRectF rectF = new RectF(100,100,800,400);\n\tcanvas.drawRect(rectF,mPaint);\n\n\tRect和RectF的区别在于int 和 float精度,方法也不相同;\n\n#### 3. 圆角矩形 ---- 矩形 + 内切椭圆的两个半径(半径大于矩形一半的宽度按一半来算)\n\n\t// 第一种\n\tRectF rectF = new RectF(100,100,800,400);\n\tcanvas.drawRoundRect(rectF,30,30,mPaint);\n\t\n\t// 第二种\n\tcanvas.drawRoundRect(100,100,800,400,30,30,mPaint);\n\n\n#### 4. 椭圆 ---- 矩形的内切椭圆,只需给定矩形\n\n\t// 第一种\n\tRectF rectF = new RectF(100,100,800,400);\n\tcanvas.drawOval(rectF,mPaint);\n\t\n\t// 第二种\n\tcanvas.drawOval(100,100,800,400,mPaint);\n\n\n#### 5. 圆 ---- 圆心 + 半径\n\n\tcanvas.drawCircle(500,500,400,mPaint);  \n\t// 绘制一个圆心坐标在(500,500)，半径为400 的圆。\n\n#### 6. 圆弧 ---- 矩形内切椭圆 + 开始角度 + 结束角度 + 是否使用中心\n\t// 第一种\n\tpublic void drawArc(@NonNull RectF oval, float startAngle, float sweepAngle, boolean useCenter, @NonNull Paint paint)\n\t    \n\t// 第二种\n\tpublic void drawArc(float left, float top, float right, float bottom, float startAngle,\n\tfloat sweepAngle, boolean useCenter, @NonNull Paint paint)\n\n### Paint\n\n1. 类型setStyle(int style)\n\t1. Paint.Style.STROKE:描边 \n\t2. Paint.Style.FILL:填充\n\t3. Paint.Style.FILL_AND_STROKE:描边+填充\n2. 描边宽度\n\n\t\tpaint.setStrokeWidth(40);\n3. 抗锯齿\n\n\t\tsetAntiAlias(true);\n\n\n### Canvas\n\n\n1. 快照和回滚\n    1. 基础\n\n\t\t快照 : save();\t\t\t//保存画布状态\n\t\t回滚 : restore();\t\t//取出最后一次入栈的图层\n\n\t\tsave就是图层入栈,restore就是图层出栈;\t\n\t\n\t2. 对应的API:\n\t\t\n    \t\tsave()\t\t\t\t把当前的画布的状态进行保存，\n    \t\t或save(saveFlags)\t然后放入特定的栈中\n\n        \t\tALL_SAVE_FLAG\t\t\t\t默认，保存全部状态\n        \t\tCLIP_SAVE_FLAG\t\t\t\t保存剪辑区\n        \t\tCLIP_TO_LAYER_SAVE_FLAG\t\t剪裁区作为图层保存\n        \t\tFULL_COLOR_LAYER_SAVE_FLAG\t保存图层的全部色彩通道\n        \t\tHAS_ALPHA_LAYER_SAVE_FLAG\t保存图层的alpha(不透明度)通道\n        \t\tMATRIX_SAVE_FLAG\t\t\t保存Matrix信息( translate, rotate, scale, skew)\n    \n    \t\tsaveLayerXxx\t\t新建一个图层，并放入特定的栈中\n    \n\t\t\t\tsaveLayerXxx,导致图层叠加造成计算量增倍而过度渲染.\n\n                // 无图层alpha(不透明度)通道\n                public int saveLayer \n                (RectF bounds, Paint paint)\n                (RectF bounds, Paint paint, int saveFlags)\n                (float left, float top, float right, float bottom, Paint paint)\n                (float left, float top, float right, float bottom, Paint paint, int saveFlags)\n                // 有图层alpha(不透明度)通道\n                public int saveLayerAlpha (....,int alpha)\n\n    \t\trestore\t\t\t\t把栈中最顶层的画布状态取出来，\n    \t\t\t\t\t\t\t并按照这个状态恢复当前的画布\n    \n    \t\trestoreToCount\t\t弹出指定位置及其以上所有的状态，\n    \t\t\t\t\t\t\t并按照指定位置的状态进行恢复\n    \n    \t\tgetSaveCount\t\t获取栈中内容的数量(即保存次数)\n\n2. 位移(不断叠加),基于上一次位置的移动.\n\n\t\tcanvas.translate(200,200);\n\t\n3. 旋转(不断叠加),根据**某个中心位置或者原点**旋转**某个角度**;\n\t\t\n\t\tpublic void rotate \n\t\t(float degrees)\n        (float degrees, float px, float py)\n\n4. 缩放(不断叠加),**根据原点位置对x,y方向上的缩放比例,或者根据某个缩放中心的位置控制缩放比例;当缩放比例sx or sy < 0时,会进行翻转相当于中心对称翻转;**\n\n\t\tpublic void scale (float sx, float sy)\n\n\t\tpublic final void scale (float sx, float sy, float px, float py)\n\n\n5. 错切(不断叠加) - skew,**在某个方向上倾斜对应的角度,填入的值为角度对应的tan值.**\n\n\t\tpublic void skew (float sx, float sy)\n\t\t\n\t\t变换之后的值:\n\t\t\tX = x + sx * y\n\t\t\tY = sy * x + y\n\n\n","slug":"Android之自定义控件——Canvas绘制参考","published":1,"date":"2018-03-21T08:00:11.955Z","updated":"2018-03-21T08:10:48.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf0v9p060000m84lm8qh33w7","content":"<h1 id=\"Canvas-绘制\"><a href=\"#Canvas-绘制\" class=\"headerlink\" title=\"Canvas 绘制\"></a>Canvas 绘制</h1><pre><code>目录:\n    1. 图片文字绘制\n    2. 零散内容绘制和画布调整\n</code></pre><a id=\"more\"></a>\n<hr>\n<h2 id=\"Canvas图片文字绘制\"><a href=\"#Canvas图片文字绘制\" class=\"headerlink\" title=\"Canvas图片文字绘制\"></a>Canvas图片文字绘制</h2><pre><code>概要:\n    1. 绘制图片\n    2. 绘制文字\n</code></pre><h3 id=\"1-绘制图片\"><a href=\"#1-绘制图片\" class=\"headerlink\" title=\"1. 绘制图片\"></a>1. 绘制图片</h3><h4 id=\"矢量-drawPicture\"><a href=\"#矢量-drawPicture\" class=\"headerlink\" title=\"矢量(drawPicture)\"></a>矢量(drawPicture)</h4><p>警告:需要关闭硬件加速.</p>\n<ul>\n<li>矢量图绘制就是记录Canvas绘制的内容. </li>\n<li><p>Picture的相关函数</p>\n<pre><code>- getWidth\\height():得到宽高\n- beginRecording(int width,int height):开始录制,return Canvas;\n- endRecording():结束录制;\n- draw(Canvas canvas):绘制矢量图;\n</code></pre></li>\n<li><p>矢量图的绘制有以下三种方式:</p>\n<ol>\n<li><p>mPic.draw(canvas);</p>\n<ul>\n<li>低版本<strong>影响canvas的状态</strong>,一般不使用;</li>\n</ul>\n</li>\n<li><p>canvas.drawPicture(mPic);</p>\n<ul>\n<li><p><strong>不影响canvas状态,可以设置显示矢量图的区域矩形大小,完全压缩显示.</strong></p>\n<pre><code>public void drawPicture (Picture picture)\n\npublic void drawPicture (Picture picture, Rect dst)\n\npublic void drawPicture (Picture picture, RectF dst)                \n</code></pre></li>\n</ul>\n</li>\n<li><p>picture → pictureDrawable → pictureDrawable.draw(canvas),<strong>不会缩放,按显示区域大小显示一部分</strong>;</p>\n<pre><code>// 包装成为Drawable\nPictureDrawable drawable = new PictureDrawable(mPicture);\n// 设置绘制区域 -- 注意此处所绘制的实际内容不会缩放\ndrawable.setBounds(0,0,250,mPicture.getHeight());\n// 绘制\ndrawable.draw(canvas);\n</code></pre></li>\n</ol>\n</li>\n</ul>\n<h4 id=\"位图-drawBitmap\"><a href=\"#位图-drawBitmap\" class=\"headerlink\" title=\"位图(drawBitmap)\"></a>位图(drawBitmap)</h4><p>可能会消耗大量的内存,或者会造成内存泄露;<br>首先获得bitmap,然后进行绘制.</p>\n<ol>\n<li><p>获取</p>\n<ol>\n<li><p>资源文件(drawable/mipmap/raw):</p>\n<pre><code>Bitmap bitmap = BitmapFactory.decodeResource\n(mContext.getResources(),R.raw.bitmap);\n</code></pre></li>\n<li><p>资源文件(assets):</p>\n<pre><code>Bitmap bitmap=null;\ntry {\n    InputStream is = mContext.getAssets()\n    .open(&quot;bitmap.png&quot;);\n    bitmap = BitmapFactory.decodeStream(is);\n    is.close();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n</code></pre></li>\n<li><p>内存卡文件:</p>\n<pre><code>Bitmap bitmap = BitmapFactory\n    .decodeFile(&quot;/sdcard/.../bitmap.png&quot;);\n</code></pre></li>\n<li><p>网络文件:</p>\n<pre><code>// 此处省略了获取网络输入流的代码\nBitmap bitmap = BitmapFactory.decodeStream(is);\nis.close();\n</code></pre></li>\n</ol>\n</li>\n<li><p>绘制</p>\n<pre><code>public void drawBitmap \n1. (Bitmap bitmap, Matrix matrix, Paint paint)\n2. (Bitmap bitmap, float left, float top, Paint paint)\n3. (Bitmap bitmap, Rect src, Rect dst, Paint paint)\n4. (Bitmap bitmap, Rect src, RectF dst, Paint paint)\n\n1. 默认绘制起点为原点.\n    `canvas.drawBitmap(bitmap,new Matrix(),new Paint());`\n2. 确定一个绘制起点坐标.\n3. 4.指定图片的绘制矩形区域和图片在屏幕上的绘制矩形区域,当前者宽/高度&gt;后者宽/高度的情况下会压缩.\n\ncanvas.translate(mWidth/2,mHeight/2);\n// 指定图片绘制区域(左上角的四分之一)\nRect src = new Rect(0,0,bitmap.getWidth()/2,bitmap.getHeight()/2);\n// 指定图片在屏幕上显示的区域\nRect dst = new Rect(0,0,200,400);\n// 绘制图片\ncanvas.drawBitmap(bitmap,src,dst,null);\n\n4. 注:可以控制两个区域的大小来完成某个动画.\n</code></pre></li>\n</ol>\n<h3 id=\"2-绘制文字\"><a href=\"#2-绘制文字\" class=\"headerlink\" title=\"2. 绘制文字\"></a>2. 绘制文字</h3><pre><code>画笔Paint文本相关函数:\n色彩    setColor,setARGB,setAlpha  设置颜色，透明度\n大小    setTextSize                   设置文本字体大小\n字体    setTypeface                   设置或清除字体样式\n样式    setStyle                   填充描边等\n对齐    setTextAlign               左,居中,右\n测量    measureText                   测量文本大小\n\n(注意:measureText()在设置完文本各项参数后调用)\n</code></pre><ol>\n<li>指定文本基线位置(x,y)</li>\n</ol>\n<pre><code>    public void drawText \n    (String text, float x, float y, Paint paint)\n    (String text, int start, int end, float x, float y, Paint paint)\n    (CharSequence text, int start, int end, float x, float y, Paint paint)\n    (char[] text, int index, int count, float x, float y, Paint paint)\n\n\n* 截取的字符串的index∈[start,end),index从0开始,\n* count指截取的char字符数;\n</code></pre><ol>\n<li><p>指定每个文字的位置(不建议使用)</p>\n<pre><code>public void drawPosText \n(String text, float[] pos, Paint paint)\n(char[] text, int index, int count, float[] pos, Paint paint)\n</code></pre><ul>\n<li><p>例:</p>\n<pre><code>canvas.drawPosText(str,new float[]{\n      100,100,    // 第一个字符位置\n      200,200,    // 第二个字符位置\n      300,300,    // ...\n      400,400,\n      500,500},\ntextPaint);\n</code></pre></li>\n<li><p>缺点:</p>\n<ol>\n<li>必须指定所有字符位置，否则直接crash掉，反人类设计</li>\n<li>性能不佳，在大量使用的时候可能导致卡顿</li>\n<li>不支持emoji等特殊字符，不支持字形组合与分解        </li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>指定路径来绘制文字</p>\n<pre><code>public void drawTextOnPath \n(String text, Path path, float hOffset, float vOffset, Paint paint)\n(char[] text, int index, int count, Path path, float hOffset, float vOffset, Paint paint)\n</code></pre></li>\n</ol>\n<hr>\n<h2 id=\"Canvas内容绘制\"><a href=\"#Canvas内容绘制\" class=\"headerlink\" title=\"Canvas内容绘制\"></a>Canvas内容绘制</h2><pre><code>- 绘制颜色\n    - 主要函数:drawColor, drawRGB, drawARGB\n    - 使用单一颜色填充整个画布\n- 绘制基本形状\n    - 主要函数:drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc    \n    - 依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧\n- 绘制图片\n    - 主要函数:drawBitmap, drawPicture\n    - 绘制位图和图片\n- 绘制文本    \n    - drawText, drawPosText, drawTextOnPath    \n    - 依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字\n- 绘制路径    \n    - drawPath    \n    - 绘制路径，绘制贝塞尔曲线时也需要用到该函数\n- 顶点操作    \n    - drawVertices, drawBitmapMesh    \n    - 通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用\n- 画布剪裁    \n    - clipPath, clipRect    \n    - 设置画布的显示区域\n- 画布快照    \n    - save, restore, saveLayerXxx, restoreToCount, getSaveCount    \n    - 依次为 保存当前状态、回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数\n- 画布变换    \n    - translate, scale, rotate, skew    \n    - 依次为 位移、缩放、 旋转、错切\n- Matrix(矩阵)    \n    - getMatrix, setMatrix, concat    \n    - 实际上画布的位移，缩放等操作的都是图像矩阵Matrix， 只不过Matrix比较难以理解和使用，故封装了一些常用的方法。\n</code></pre><h3 id=\"绘制画布颜色\"><a href=\"#绘制画布颜色\" class=\"headerlink\" title=\"绘制画布颜色\"></a>绘制画布颜色</h3><pre><code>canvas.drawColor(int color);\n</code></pre><h4 id=\"绘制一个或者多个坐标点\"><a href=\"#绘制一个或者多个坐标点\" class=\"headerlink\" title=\"绘制一个或者多个坐标点\"></a>绘制一个或者多个坐标点</h4><pre><code>canvas.drawPoint(200, 200, mPaint);    \n //在坐标(200,200)位置绘制一个点\ncanvas.drawPoints(new float[]{          \n//绘制一组点，坐标位置由float数组指定\n      500,500,\n      500,600,\n      500,700\n},mPaint);\n</code></pre><h3 id=\"绘制形状\"><a href=\"#绘制形状\" class=\"headerlink\" title=\"绘制形状\"></a>绘制形状</h3><h4 id=\"1-线-—-每两个点确定一条线段\"><a href=\"#1-线-—-每两个点确定一条线段\" class=\"headerlink\" title=\"1. 线 —- 每两个点确定一条线段\"></a>1. 线 —- 每两个点确定一条线段</h4><pre><code>canvas.drawLine(300,300,500,600,mPaint);    \n// 在坐标(300,300)(500,600)之间绘制一条直线\ncanvas.drawLines(new float[]{               \n// 绘制一组线 每四数字(两个点的坐标)确定一条线\n    100,200,200,200,\n    100,300,200,300\n},mPaint);\n</code></pre><h4 id=\"2-矩形-—-两个对角线确定一个矩形\"><a href=\"#2-矩形-—-两个对角线确定一个矩形\" class=\"headerlink\" title=\"2. 矩形 —- 两个对角线确定一个矩形\"></a>2. 矩形 —- 两个对角线确定一个矩形</h4><pre><code>// 第一种\ncanvas.drawRect(100,100,800,400,mPaint);\n\n// 第二种\nRect rect = new Rect(100,100,800,400);\ncanvas.drawRect(rect,mPaint);\n\n// 第三种\nRectF rectF = new RectF(100,100,800,400);\ncanvas.drawRect(rectF,mPaint);\n\nRect和RectF的区别在于int 和 float精度,方法也不相同;\n</code></pre><h4 id=\"3-圆角矩形-—-矩形-内切椭圆的两个半径-半径大于矩形一半的宽度按一半来算\"><a href=\"#3-圆角矩形-—-矩形-内切椭圆的两个半径-半径大于矩形一半的宽度按一半来算\" class=\"headerlink\" title=\"3. 圆角矩形 —- 矩形 + 内切椭圆的两个半径(半径大于矩形一半的宽度按一半来算)\"></a>3. 圆角矩形 —- 矩形 + 内切椭圆的两个半径(半径大于矩形一半的宽度按一半来算)</h4><pre><code>// 第一种\nRectF rectF = new RectF(100,100,800,400);\ncanvas.drawRoundRect(rectF,30,30,mPaint);\n\n// 第二种\ncanvas.drawRoundRect(100,100,800,400,30,30,mPaint);\n</code></pre><h4 id=\"4-椭圆-—-矩形的内切椭圆-只需给定矩形\"><a href=\"#4-椭圆-—-矩形的内切椭圆-只需给定矩形\" class=\"headerlink\" title=\"4. 椭圆 —- 矩形的内切椭圆,只需给定矩形\"></a>4. 椭圆 —- 矩形的内切椭圆,只需给定矩形</h4><pre><code>// 第一种\nRectF rectF = new RectF(100,100,800,400);\ncanvas.drawOval(rectF,mPaint);\n\n// 第二种\ncanvas.drawOval(100,100,800,400,mPaint);\n</code></pre><h4 id=\"5-圆-—-圆心-半径\"><a href=\"#5-圆-—-圆心-半径\" class=\"headerlink\" title=\"5. 圆 —- 圆心 + 半径\"></a>5. 圆 —- 圆心 + 半径</h4><pre><code>canvas.drawCircle(500,500,400,mPaint);  \n// 绘制一个圆心坐标在(500,500)，半径为400 的圆。\n</code></pre><h4 id=\"6-圆弧-—-矩形内切椭圆-开始角度-结束角度-是否使用中心\"><a href=\"#6-圆弧-—-矩形内切椭圆-开始角度-结束角度-是否使用中心\" class=\"headerlink\" title=\"6. 圆弧 —- 矩形内切椭圆 + 开始角度 + 结束角度 + 是否使用中心\"></a>6. 圆弧 —- 矩形内切椭圆 + 开始角度 + 结束角度 + 是否使用中心</h4><pre><code>// 第一种\npublic void drawArc(@NonNull RectF oval, float startAngle, float sweepAngle, boolean useCenter, @NonNull Paint paint)\n\n// 第二种\npublic void drawArc(float left, float top, float right, float bottom, float startAngle,\nfloat sweepAngle, boolean useCenter, @NonNull Paint paint)\n</code></pre><h3 id=\"Paint\"><a href=\"#Paint\" class=\"headerlink\" title=\"Paint\"></a>Paint</h3><ol>\n<li>类型setStyle(int style)<ol>\n<li>Paint.Style.STROKE:描边 </li>\n<li>Paint.Style.FILL:填充</li>\n<li>Paint.Style.FILL_AND_STROKE:描边+填充</li>\n</ol>\n</li>\n<li><p>描边宽度</p>\n<pre><code>paint.setStrokeWidth(40);\n</code></pre></li>\n<li><p>抗锯齿</p>\n<pre><code>setAntiAlias(true);\n</code></pre></li>\n</ol>\n<h3 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h3><ol>\n<li><p>快照和回滚</p>\n<ol>\n<li><p>基础</p>\n<p> 快照 : save();            //保存画布状态<br> 回滚 : restore();        //取出最后一次入栈的图层</p>\n<p> save就是图层入栈,restore就是图层出栈;    </p>\n</li>\n<li><p>对应的API:</p>\n<pre><code>save()                把当前的画布的状态进行保存，\n或save(saveFlags)    然后放入特定的栈中\n\n    ALL_SAVE_FLAG                默认，保存全部状态\n    CLIP_SAVE_FLAG                保存剪辑区\n    CLIP_TO_LAYER_SAVE_FLAG        剪裁区作为图层保存\n    FULL_COLOR_LAYER_SAVE_FLAG    保存图层的全部色彩通道\n    HAS_ALPHA_LAYER_SAVE_FLAG    保存图层的alpha(不透明度)通道\n    MATRIX_SAVE_FLAG            保存Matrix信息( translate, rotate, scale, skew)\n\nsaveLayerXxx        新建一个图层，并放入特定的栈中\n\n    saveLayerXxx,导致图层叠加造成计算量增倍而过度渲染.\n\n    // 无图层alpha(不透明度)通道\n    public int saveLayer \n    (RectF bounds, Paint paint)\n    (RectF bounds, Paint paint, int saveFlags)\n    (float left, float top, float right, float bottom, Paint paint)\n    (float left, float top, float right, float bottom, Paint paint, int saveFlags)\n    // 有图层alpha(不透明度)通道\n    public int saveLayerAlpha (....,int alpha)\n\nrestore                把栈中最顶层的画布状态取出来，\n                    并按照这个状态恢复当前的画布\n\nrestoreToCount        弹出指定位置及其以上所有的状态，\n                    并按照指定位置的状态进行恢复\n\ngetSaveCount        获取栈中内容的数量(即保存次数)\n</code></pre></li>\n</ol>\n</li>\n<li><p>位移(不断叠加),基于上一次位置的移动.</p>\n<pre><code>canvas.translate(200,200);\n</code></pre></li>\n<li><p>旋转(不断叠加),根据<strong>某个中心位置或者原点</strong>旋转<strong>某个角度</strong>;</p>\n<pre><code>public void rotate \n(float degrees)\n(float degrees, float px, float py)\n</code></pre></li>\n<li><p>缩放(不断叠加),<strong>根据原点位置对x,y方向上的缩放比例,或者根据某个缩放中心的位置控制缩放比例;当缩放比例sx or sy &lt; 0时,会进行翻转相当于中心对称翻转;</strong></p>\n<pre><code>public void scale (float sx, float sy)\n\npublic final void scale (float sx, float sy, float px, float py)\n</code></pre></li>\n</ol>\n<ol>\n<li><p>错切(不断叠加) - skew,<strong>在某个方向上倾斜对应的角度,填入的值为角度对应的tan值.</strong></p>\n<pre><code>public void skew (float sx, float sy)\n\n变换之后的值:\n    X = x + sx * y\n    Y = sy * x + y\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"Canvas-绘制\"><a href=\"#Canvas-绘制\" class=\"headerlink\" title=\"Canvas 绘制\"></a>Canvas 绘制</h1><pre><code>目录:\n    1. 图片文字绘制\n    2. 零散内容绘制和画布调整\n</code></pre>","more":"<hr>\n<h2 id=\"Canvas图片文字绘制\"><a href=\"#Canvas图片文字绘制\" class=\"headerlink\" title=\"Canvas图片文字绘制\"></a>Canvas图片文字绘制</h2><pre><code>概要:\n    1. 绘制图片\n    2. 绘制文字\n</code></pre><h3 id=\"1-绘制图片\"><a href=\"#1-绘制图片\" class=\"headerlink\" title=\"1. 绘制图片\"></a>1. 绘制图片</h3><h4 id=\"矢量-drawPicture\"><a href=\"#矢量-drawPicture\" class=\"headerlink\" title=\"矢量(drawPicture)\"></a>矢量(drawPicture)</h4><p>警告:需要关闭硬件加速.</p>\n<ul>\n<li>矢量图绘制就是记录Canvas绘制的内容. </li>\n<li><p>Picture的相关函数</p>\n<pre><code>- getWidth\\height():得到宽高\n- beginRecording(int width,int height):开始录制,return Canvas;\n- endRecording():结束录制;\n- draw(Canvas canvas):绘制矢量图;\n</code></pre></li>\n<li><p>矢量图的绘制有以下三种方式:</p>\n<ol>\n<li><p>mPic.draw(canvas);</p>\n<ul>\n<li>低版本<strong>影响canvas的状态</strong>,一般不使用;</li>\n</ul>\n</li>\n<li><p>canvas.drawPicture(mPic);</p>\n<ul>\n<li><p><strong>不影响canvas状态,可以设置显示矢量图的区域矩形大小,完全压缩显示.</strong></p>\n<pre><code>public void drawPicture (Picture picture)\n\npublic void drawPicture (Picture picture, Rect dst)\n\npublic void drawPicture (Picture picture, RectF dst)                \n</code></pre></li>\n</ul>\n</li>\n<li><p>picture → pictureDrawable → pictureDrawable.draw(canvas),<strong>不会缩放,按显示区域大小显示一部分</strong>;</p>\n<pre><code>// 包装成为Drawable\nPictureDrawable drawable = new PictureDrawable(mPicture);\n// 设置绘制区域 -- 注意此处所绘制的实际内容不会缩放\ndrawable.setBounds(0,0,250,mPicture.getHeight());\n// 绘制\ndrawable.draw(canvas);\n</code></pre></li>\n</ol>\n</li>\n</ul>\n<h4 id=\"位图-drawBitmap\"><a href=\"#位图-drawBitmap\" class=\"headerlink\" title=\"位图(drawBitmap)\"></a>位图(drawBitmap)</h4><p>可能会消耗大量的内存,或者会造成内存泄露;<br>首先获得bitmap,然后进行绘制.</p>\n<ol>\n<li><p>获取</p>\n<ol>\n<li><p>资源文件(drawable/mipmap/raw):</p>\n<pre><code>Bitmap bitmap = BitmapFactory.decodeResource\n(mContext.getResources(),R.raw.bitmap);\n</code></pre></li>\n<li><p>资源文件(assets):</p>\n<pre><code>Bitmap bitmap=null;\ntry {\n    InputStream is = mContext.getAssets()\n    .open(&quot;bitmap.png&quot;);\n    bitmap = BitmapFactory.decodeStream(is);\n    is.close();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n</code></pre></li>\n<li><p>内存卡文件:</p>\n<pre><code>Bitmap bitmap = BitmapFactory\n    .decodeFile(&quot;/sdcard/.../bitmap.png&quot;);\n</code></pre></li>\n<li><p>网络文件:</p>\n<pre><code>// 此处省略了获取网络输入流的代码\nBitmap bitmap = BitmapFactory.decodeStream(is);\nis.close();\n</code></pre></li>\n</ol>\n</li>\n<li><p>绘制</p>\n<pre><code>public void drawBitmap \n1. (Bitmap bitmap, Matrix matrix, Paint paint)\n2. (Bitmap bitmap, float left, float top, Paint paint)\n3. (Bitmap bitmap, Rect src, Rect dst, Paint paint)\n4. (Bitmap bitmap, Rect src, RectF dst, Paint paint)\n\n1. 默认绘制起点为原点.\n    `canvas.drawBitmap(bitmap,new Matrix(),new Paint());`\n2. 确定一个绘制起点坐标.\n3. 4.指定图片的绘制矩形区域和图片在屏幕上的绘制矩形区域,当前者宽/高度&gt;后者宽/高度的情况下会压缩.\n\ncanvas.translate(mWidth/2,mHeight/2);\n// 指定图片绘制区域(左上角的四分之一)\nRect src = new Rect(0,0,bitmap.getWidth()/2,bitmap.getHeight()/2);\n// 指定图片在屏幕上显示的区域\nRect dst = new Rect(0,0,200,400);\n// 绘制图片\ncanvas.drawBitmap(bitmap,src,dst,null);\n\n4. 注:可以控制两个区域的大小来完成某个动画.\n</code></pre></li>\n</ol>\n<h3 id=\"2-绘制文字\"><a href=\"#2-绘制文字\" class=\"headerlink\" title=\"2. 绘制文字\"></a>2. 绘制文字</h3><pre><code>画笔Paint文本相关函数:\n色彩    setColor,setARGB,setAlpha  设置颜色，透明度\n大小    setTextSize                   设置文本字体大小\n字体    setTypeface                   设置或清除字体样式\n样式    setStyle                   填充描边等\n对齐    setTextAlign               左,居中,右\n测量    measureText                   测量文本大小\n\n(注意:measureText()在设置完文本各项参数后调用)\n</code></pre><ol>\n<li>指定文本基线位置(x,y)</li>\n</ol>\n<pre><code>    public void drawText \n    (String text, float x, float y, Paint paint)\n    (String text, int start, int end, float x, float y, Paint paint)\n    (CharSequence text, int start, int end, float x, float y, Paint paint)\n    (char[] text, int index, int count, float x, float y, Paint paint)\n\n\n* 截取的字符串的index∈[start,end),index从0开始,\n* count指截取的char字符数;\n</code></pre><ol>\n<li><p>指定每个文字的位置(不建议使用)</p>\n<pre><code>public void drawPosText \n(String text, float[] pos, Paint paint)\n(char[] text, int index, int count, float[] pos, Paint paint)\n</code></pre><ul>\n<li><p>例:</p>\n<pre><code>canvas.drawPosText(str,new float[]{\n      100,100,    // 第一个字符位置\n      200,200,    // 第二个字符位置\n      300,300,    // ...\n      400,400,\n      500,500},\ntextPaint);\n</code></pre></li>\n<li><p>缺点:</p>\n<ol>\n<li>必须指定所有字符位置，否则直接crash掉，反人类设计</li>\n<li>性能不佳，在大量使用的时候可能导致卡顿</li>\n<li>不支持emoji等特殊字符，不支持字形组合与分解        </li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>指定路径来绘制文字</p>\n<pre><code>public void drawTextOnPath \n(String text, Path path, float hOffset, float vOffset, Paint paint)\n(char[] text, int index, int count, Path path, float hOffset, float vOffset, Paint paint)\n</code></pre></li>\n</ol>\n<hr>\n<h2 id=\"Canvas内容绘制\"><a href=\"#Canvas内容绘制\" class=\"headerlink\" title=\"Canvas内容绘制\"></a>Canvas内容绘制</h2><pre><code>- 绘制颜色\n    - 主要函数:drawColor, drawRGB, drawARGB\n    - 使用单一颜色填充整个画布\n- 绘制基本形状\n    - 主要函数:drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc    \n    - 依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧\n- 绘制图片\n    - 主要函数:drawBitmap, drawPicture\n    - 绘制位图和图片\n- 绘制文本    \n    - drawText, drawPosText, drawTextOnPath    \n    - 依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字\n- 绘制路径    \n    - drawPath    \n    - 绘制路径，绘制贝塞尔曲线时也需要用到该函数\n- 顶点操作    \n    - drawVertices, drawBitmapMesh    \n    - 通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用\n- 画布剪裁    \n    - clipPath, clipRect    \n    - 设置画布的显示区域\n- 画布快照    \n    - save, restore, saveLayerXxx, restoreToCount, getSaveCount    \n    - 依次为 保存当前状态、回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数\n- 画布变换    \n    - translate, scale, rotate, skew    \n    - 依次为 位移、缩放、 旋转、错切\n- Matrix(矩阵)    \n    - getMatrix, setMatrix, concat    \n    - 实际上画布的位移，缩放等操作的都是图像矩阵Matrix， 只不过Matrix比较难以理解和使用，故封装了一些常用的方法。\n</code></pre><h3 id=\"绘制画布颜色\"><a href=\"#绘制画布颜色\" class=\"headerlink\" title=\"绘制画布颜色\"></a>绘制画布颜色</h3><pre><code>canvas.drawColor(int color);\n</code></pre><h4 id=\"绘制一个或者多个坐标点\"><a href=\"#绘制一个或者多个坐标点\" class=\"headerlink\" title=\"绘制一个或者多个坐标点\"></a>绘制一个或者多个坐标点</h4><pre><code>canvas.drawPoint(200, 200, mPaint);    \n //在坐标(200,200)位置绘制一个点\ncanvas.drawPoints(new float[]{          \n//绘制一组点，坐标位置由float数组指定\n      500,500,\n      500,600,\n      500,700\n},mPaint);\n</code></pre><h3 id=\"绘制形状\"><a href=\"#绘制形状\" class=\"headerlink\" title=\"绘制形状\"></a>绘制形状</h3><h4 id=\"1-线-—-每两个点确定一条线段\"><a href=\"#1-线-—-每两个点确定一条线段\" class=\"headerlink\" title=\"1. 线 —- 每两个点确定一条线段\"></a>1. 线 —- 每两个点确定一条线段</h4><pre><code>canvas.drawLine(300,300,500,600,mPaint);    \n// 在坐标(300,300)(500,600)之间绘制一条直线\ncanvas.drawLines(new float[]{               \n// 绘制一组线 每四数字(两个点的坐标)确定一条线\n    100,200,200,200,\n    100,300,200,300\n},mPaint);\n</code></pre><h4 id=\"2-矩形-—-两个对角线确定一个矩形\"><a href=\"#2-矩形-—-两个对角线确定一个矩形\" class=\"headerlink\" title=\"2. 矩形 —- 两个对角线确定一个矩形\"></a>2. 矩形 —- 两个对角线确定一个矩形</h4><pre><code>// 第一种\ncanvas.drawRect(100,100,800,400,mPaint);\n\n// 第二种\nRect rect = new Rect(100,100,800,400);\ncanvas.drawRect(rect,mPaint);\n\n// 第三种\nRectF rectF = new RectF(100,100,800,400);\ncanvas.drawRect(rectF,mPaint);\n\nRect和RectF的区别在于int 和 float精度,方法也不相同;\n</code></pre><h4 id=\"3-圆角矩形-—-矩形-内切椭圆的两个半径-半径大于矩形一半的宽度按一半来算\"><a href=\"#3-圆角矩形-—-矩形-内切椭圆的两个半径-半径大于矩形一半的宽度按一半来算\" class=\"headerlink\" title=\"3. 圆角矩形 —- 矩形 + 内切椭圆的两个半径(半径大于矩形一半的宽度按一半来算)\"></a>3. 圆角矩形 —- 矩形 + 内切椭圆的两个半径(半径大于矩形一半的宽度按一半来算)</h4><pre><code>// 第一种\nRectF rectF = new RectF(100,100,800,400);\ncanvas.drawRoundRect(rectF,30,30,mPaint);\n\n// 第二种\ncanvas.drawRoundRect(100,100,800,400,30,30,mPaint);\n</code></pre><h4 id=\"4-椭圆-—-矩形的内切椭圆-只需给定矩形\"><a href=\"#4-椭圆-—-矩形的内切椭圆-只需给定矩形\" class=\"headerlink\" title=\"4. 椭圆 —- 矩形的内切椭圆,只需给定矩形\"></a>4. 椭圆 —- 矩形的内切椭圆,只需给定矩形</h4><pre><code>// 第一种\nRectF rectF = new RectF(100,100,800,400);\ncanvas.drawOval(rectF,mPaint);\n\n// 第二种\ncanvas.drawOval(100,100,800,400,mPaint);\n</code></pre><h4 id=\"5-圆-—-圆心-半径\"><a href=\"#5-圆-—-圆心-半径\" class=\"headerlink\" title=\"5. 圆 —- 圆心 + 半径\"></a>5. 圆 —- 圆心 + 半径</h4><pre><code>canvas.drawCircle(500,500,400,mPaint);  \n// 绘制一个圆心坐标在(500,500)，半径为400 的圆。\n</code></pre><h4 id=\"6-圆弧-—-矩形内切椭圆-开始角度-结束角度-是否使用中心\"><a href=\"#6-圆弧-—-矩形内切椭圆-开始角度-结束角度-是否使用中心\" class=\"headerlink\" title=\"6. 圆弧 —- 矩形内切椭圆 + 开始角度 + 结束角度 + 是否使用中心\"></a>6. 圆弧 —- 矩形内切椭圆 + 开始角度 + 结束角度 + 是否使用中心</h4><pre><code>// 第一种\npublic void drawArc(@NonNull RectF oval, float startAngle, float sweepAngle, boolean useCenter, @NonNull Paint paint)\n\n// 第二种\npublic void drawArc(float left, float top, float right, float bottom, float startAngle,\nfloat sweepAngle, boolean useCenter, @NonNull Paint paint)\n</code></pre><h3 id=\"Paint\"><a href=\"#Paint\" class=\"headerlink\" title=\"Paint\"></a>Paint</h3><ol>\n<li>类型setStyle(int style)<ol>\n<li>Paint.Style.STROKE:描边 </li>\n<li>Paint.Style.FILL:填充</li>\n<li>Paint.Style.FILL_AND_STROKE:描边+填充</li>\n</ol>\n</li>\n<li><p>描边宽度</p>\n<pre><code>paint.setStrokeWidth(40);\n</code></pre></li>\n<li><p>抗锯齿</p>\n<pre><code>setAntiAlias(true);\n</code></pre></li>\n</ol>\n<h3 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h3><ol>\n<li><p>快照和回滚</p>\n<ol>\n<li><p>基础</p>\n<p> 快照 : save();            //保存画布状态<br> 回滚 : restore();        //取出最后一次入栈的图层</p>\n<p> save就是图层入栈,restore就是图层出栈;    </p>\n</li>\n<li><p>对应的API:</p>\n<pre><code>save()                把当前的画布的状态进行保存，\n或save(saveFlags)    然后放入特定的栈中\n\n    ALL_SAVE_FLAG                默认，保存全部状态\n    CLIP_SAVE_FLAG                保存剪辑区\n    CLIP_TO_LAYER_SAVE_FLAG        剪裁区作为图层保存\n    FULL_COLOR_LAYER_SAVE_FLAG    保存图层的全部色彩通道\n    HAS_ALPHA_LAYER_SAVE_FLAG    保存图层的alpha(不透明度)通道\n    MATRIX_SAVE_FLAG            保存Matrix信息( translate, rotate, scale, skew)\n\nsaveLayerXxx        新建一个图层，并放入特定的栈中\n\n    saveLayerXxx,导致图层叠加造成计算量增倍而过度渲染.\n\n    // 无图层alpha(不透明度)通道\n    public int saveLayer \n    (RectF bounds, Paint paint)\n    (RectF bounds, Paint paint, int saveFlags)\n    (float left, float top, float right, float bottom, Paint paint)\n    (float left, float top, float right, float bottom, Paint paint, int saveFlags)\n    // 有图层alpha(不透明度)通道\n    public int saveLayerAlpha (....,int alpha)\n\nrestore                把栈中最顶层的画布状态取出来，\n                    并按照这个状态恢复当前的画布\n\nrestoreToCount        弹出指定位置及其以上所有的状态，\n                    并按照指定位置的状态进行恢复\n\ngetSaveCount        获取栈中内容的数量(即保存次数)\n</code></pre></li>\n</ol>\n</li>\n<li><p>位移(不断叠加),基于上一次位置的移动.</p>\n<pre><code>canvas.translate(200,200);\n</code></pre></li>\n<li><p>旋转(不断叠加),根据<strong>某个中心位置或者原点</strong>旋转<strong>某个角度</strong>;</p>\n<pre><code>public void rotate \n(float degrees)\n(float degrees, float px, float py)\n</code></pre></li>\n<li><p>缩放(不断叠加),<strong>根据原点位置对x,y方向上的缩放比例,或者根据某个缩放中心的位置控制缩放比例;当缩放比例sx or sy &lt; 0时,会进行翻转相当于中心对称翻转;</strong></p>\n<pre><code>public void scale (float sx, float sy)\n\npublic final void scale (float sx, float sy, float px, float py)\n</code></pre></li>\n</ol>\n<ol>\n<li><p>错切(不断叠加) - skew,<strong>在某个方向上倾斜对应的角度,填入的值为角度对应的tan值.</strong></p>\n<pre><code>public void skew (float sx, float sy)\n\n变换之后的值:\n    X = x + sx * y\n    Y = sy * x + y\n</code></pre></li>\n</ol>"},{"title":"控件的测量,布局,绘制过程","_content":"# 控件的测量,布局,绘制过程 #\n\n\t目录:\n\t\t- 测量\n\t\t\t1. 测量之MeasureSpec与LayoutParams\n\t\t\t2. View # onMeasure(int,int)\n\t\t\t3. ViewGroup # measureChildren()\n\t\t\t4. 测量某个View的宽高的方式\n\t\t- 布局\n\t\t\t1. View # layout(int,int,int,int)\n\t\t\t2. View # onLayout()\n\t\t\t\t1. LinearLayout\n\t\t\t\t2. RelativeLayout\n\t\t\t\t3. FrameLayout\n\t\t- 绘制\n\t\t\tView # draw(Canvas)\n\t\t\t\t1. Draw the background\t绘制背景\n\t\t\t\t2. If necessary, save the canvas' layers to prepare for fading\n                3. Draw view's content\t绘制内容\n                4. Draw children\t\t绘制子控件\n                5. If necessary, draw the fading edges and restore layers\n                6. Draw decorations (scrollbars for instance) 绘制附加内容\n\n\t参考自:\n\t\t\t1. 《 Android 开发艺术探索 》 : Page 174\n\t\t\t2. Android开发之自定义控件(二)---onLayout详解 : http://blog.csdn.net/dmk877/article/details/49632959\n\t\t\t\n<!-- more -->\n---\n### 测量 ###\n\n\n#### 1. 测量之`MeasureSpec`与`LayoutParams` ####\n\n[**`WindowManager$LayoutParams` 友情链接 点击此处** ](https://github.com/SchafferWang0818/SchafferBaseLibrary/blob/master/notes/Android%E4%B9%8B%E6%98%BE%E7%A4%BA%E2%80%94%E2%80%94WindowManager.md#windowmanagerlayoutparams)\n\n> 《 Android 开发艺术探索 》\n> 对于 `DecorView` ，其 `MeasureSpec` 由窗口的尺寸和其自身的 `LayoutParams` 来共同决定;\n> 对于普通 `View`，其 `MeasureSpec` 由<font color= red> **父容器** </font>的`MeasureSpec`和自身的 `LayoutParams` 来共同决定。\n> <font color= red> **`parentSize`指父容器当前剩余的空间大小。**</font>\n> \n\n![MeasureSpec](https://i.imgur.com/vfDqiS1.png)\n\n\n```java\n\n\t//ViewGroup.java\n\t\n    protected void measureChildWithMargins(View child,\n            int parentWidthMeasureSpec, int widthUsed,\n            int parentHeightMeasureSpec, int heightUsed) {\n        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, \n\t\t\t\tlp.width);\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed, \n\t\t\t\tlp.height);\n\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    }\n\n\tpublic static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n\n        int size = Math.max(0, specSize - padding);\n\n        int resultSize = 0;\n        int resultMode = 0;\n\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        //noinspection ResourceType\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n\n```\n---\n#### 2. `View # onMeasure(int,int)`####\n> 1.  `MeasureSpec.getSize(measureSpec)` 就是`View`测量后的大小,在`layout()`阶段确定; \n> 2. `getSuggestedMinimumWidth/Height()`设置默认大小:\n>     - 当未设置背景时,由`android:minWidth/minHeight`决定;\n>     - 当已设置背景时,由背景Drawable原始大小最小值与`android:minWidth/minHeight`决定; \n> 3. <font color= red>**依照上表, 当自定义`View` 直接继承自`View`重写`onMeasure()`并设置`wrap_content`时,相当于直接填充了父容器剩余所有空间`match_parent`。可以通过`onMeasure()`设置宽高默认值解决**</font>\n\n```java\n\tprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\t\tif( widthMode==MeasureSpec.AT_MOST \n\t\t\t\t&& heightMode==MeasureSpec.AT_MOST){\n\t\t\tsetMeasureDimension(mWidth , mHeight);  \n\t\t}else if(widthMode==MeasureSpec.AT_MOST){\n\t\t\tsetMeasureDimension(mWidth , heightSize);\n\t\t}else if(heightMode==MeasureSpec.AT_MOST){\n\t\t\tsetMeasureDimension(widthSize , mHeight);\n\t\t}\n    }\t  \n\n```\t\n\n\n```java\n\t/*\n     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     * @param heightMeasureSpec vertical space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     *\n     * @see #getMeasuredWidth()\n     * @see #getMeasuredHeight()\n     * @see #setMeasuredDimension(int, int)\n     * @see #getSuggestedMinimumHeight()\n     * @see #getSuggestedMinimumWidth()\n     * @see android.view.View.MeasureSpec#getMode(int)\n     * @see android.view.View.MeasureSpec#getSize(int)\n     */\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\t// 设置宽高的测量值\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n\n\t/**\n\t * 设置默认值\n     * Utility to return a default size. Uses the supplied size if the\n     * MeasureSpec imposed no constraints. Will get larger if allowed\n     * by the MeasureSpec.\n     *\n     * @param size Default size for this view\n     * @param measureSpec Constraints imposed by the parent\n     * @return The size this view should be.\n     */\n    public static int getDefaultSize(int size, int measureSpec) {\n        int result = size;\n        int specMode = MeasureSpec.getMode(measureSpec);\n        int specSize = MeasureSpec.getSize(measureSpec);\n\n        switch (specMode) {\n        case MeasureSpec.UNSPECIFIED:\n            result = size;\n            break;\n        case MeasureSpec.AT_MOST:\n        case MeasureSpec.EXACTLY:\n            result = specSize;\n            break;\n        }\n        return result;\n    }\n```\n---\n#### 3. `ViewGroup # measureChildren()` ####\n\n\n\n```java\n\n    /**\n\t * ViewGroup.java \n\t * 循环创建子元素的测量算子和子元素的LayoutParams通过子元素的measure()进行测量;\n     * Ask all of the children of this view to measure themselves, taking into\n     * account both the MeasureSpec requirements for this view and its padding.\n     * We skip children that are in the GONE state The heavy lifting is done in\n     * getChildMeasureSpec.\n     *\n     * @param widthMeasureSpec The width requirements for this view\n     * @param heightMeasureSpec The height requirements for this view\n     */\n    protected void measureChildren(int widthMeasureSpec, int heightMeasureSpec) {\n        final int size = mChildrenCount;\n        final View[] children = mChildren;\n        for (int i = 0; i < size; ++i) {\n            final View child = children[i];\n            if ((child.mViewFlags & VISIBILITY_MASK) != GONE) {\n                measureChild(child, widthMeasureSpec, heightMeasureSpec);\n            }\n        }\n    }\n\n```\n---\n\n#### 4. 测量某个View的宽高的方式 ####\n\n1. `Activity/View # onWindowFocusChanged(boolean)`\n\n\t```java\n\n    @Override\n    public void onWindowFocusChanged(boolean hasWindowFocus) {\n        super.onWindowFocusChanged(hasWindowFocus);\n        if (hasWindowFocus) {\n            //measureLines();\n        }\n    }\n\n\t```\n2. `View # post(Runnable)`\n\t```java\n\n\tview.post(new Runnable() {\n\t\n\t    @Override\n\t    public void run() {\n\t        view.getWidth(); // 获取宽度\n\t        view.getHeight(); // 获取高度\n\t    }\n\t});\n\n\t```\n3. `ViewTreeObserver`\n\t```java\n\tview.getViewTreeObserver().addOnGlobalLayoutListener(\n\t        new ViewTreeObserver.OnGlobalLayoutListener() {\n\t\n\t    @Override\n\t    public void onGlobalLayout() {\n\t        if (Build.VERSION.SDK_INT >= 16) {\n\t            view.getViewTreeObserver()\n\t                    .removeOnGlobalLayoutListener(this);\n\t        }\n\t        else {\n\t            view.getViewTreeObserver()\n\t                    .removeGlobalOnLayoutListener(this);\n\t        }\n\t        view.getWidth(); // 获取宽度\n\t        view.getHeight(); // 获取高度\n\t    }\n\t});\n\n\t```\n4. `View # measure(int,int)`\n\n\t- 设置固定数值\n\t\t```java\n\n\t\tint width = View.MeasureSpec.makeMeasureSpec(100,\n        \t\tView.MeasureSpec.EXACTLY);\n\t\tint height = View.MeasureSpec.makeMeasureSpec(100,\n\t\t        View.MeasureSpec.EXACTLY);\n\t\tview.measure(width, height);\n\n\t\t```\n\t- wrap_content\n\t\t```java\n\n\t\tint width = View.MeasureSpec.makeMeasureSpec((1<<30)-1,\n        \t\tView.MeasureSpec.AT_MOST);\n\t\tint height = View.MeasureSpec.makeMeasureSpec((1<<30)-1,\n\t\t        View.MeasureSpec.AT_MOST);\n\t\tview.measure(width, height);\n\n\t\t```\n\n---\n### 布局`Layout` ###\n> 《 Android 开发艺术探索 》: <font color=orange>**`ViewGroup`用来确定子元素的位置, `layout()`确定的是`ViewGroup`本身的位置,而`onLayout()`确定的是所有子控件的位置;.**</font>\n> onLayout详解 : <font color=orange>**自定义控件的第二步`onLayout`即确定控件的位置**</font>\n\n\n\n#### 1. `layout(int,int,int,int)` ####\n主要有以下步骤:\n1. <font color=red>**`View # setFrame(l, t, r, b)`初始化mLeft、mRight、mTop、mBottom，设置当前`View/ViewGroup`的四个顶点的位置;**</font>\n2. <font color=green>**`View # onLayout(changed, l, t, r, b)`确定子控件位置;**</font>\n3. <font color=blue>**判断`viewGroup.mOnLayoutChangeListeners`的存在,并调用`View $ OnLayoutChangeListener # onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB)`; **</font>\n\n```java\n\n\t/**\n     * android-26/android.view.ViewGroup.java\n     * ViewGroup # layout(int l, int t, int r, int b)\n     */\n    @Override\n    public final void layout(int l, int t, int r, int b) {\n        if (!mSuppressLayout && (mTransition == null || !mTransition.isChangingLayout())) {\n            if (mTransition != null) {\n                mTransition.layoutChange(this);\n            }\n            super.layout(l, t, r, b);\n        } else {\n            // record the fact that we noop'd it; request layout when transition finishes\n            mLayoutCalledWhileSuppressed = true;\n        }\n    }\n\t\n\t-----------------------------------------------------------------------\n\n    /**\n     * android-26/android.view.View.java\n     * View # layout(int l, int t, int r, int b)\n     * \n     * Assign a size and position to a view and all of its\n     * descendants\n     *\n     * <p>This is the second phase of the layout mechanism.\n     * (The first is measuring). In this phase, each parent calls\n     * layout on all of its children to position them.\n     * This is typically done using the child measurements\n     * that were stored in the measure pass().</p>\n     *\n     * <p>Derived classes should not override this method.\n     * Derived classes with children should override\n     * onLayout. In that method, they should\n     * call layout on each of their children.</p>\n     *\n     * @param l Left position, relative to parent\n     * @param t Top position, relative to parent\n     * @param r Right position, relative to parent\n     * @param b Bottom position, relative to parent\n     */\n    @SuppressWarnings({\"unchecked\"})\n    public void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n\n        int oldL = mLeft;\n        int oldT = mTop;\n        int oldB = mBottom;\n        int oldR = mRight;\n\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            onLayout(changed, l, t, r, b);\n\n            if (shouldDrawRoundScrollbar()) {\n                if(mRoundScrollbarRenderer == null) {\n                    mRoundScrollbarRenderer = new RoundScrollbarRenderer(this);\n                }\n            } else {\n                mRoundScrollbarRenderer = null;\n            }\n\n            mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;\n\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnLayoutChangeListeners != null) {\n                ArrayList<OnLayoutChangeListener> listenersCopy =\n                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();\n                int numListeners = listenersCopy.size();\n                for (int i = 0; i < numListeners; ++i) {\n                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);\n                }\n            }\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n\n        if ((mPrivateFlags3 & PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT) != 0) {\n            mPrivateFlags3 &= ~PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT;\n            notifyEnterOrExitForAutoFillIfNeeded(true);\n        }\n    }\n```\n---\n#### 2. `View # onLayout()` ####\n\n以 LinearLayout、RelativeLayout、FrameLayout 为例,代码如下.\n\n\n##### `LinearLayout`\n\n以竖直方向为例,由于 `LinearLayout`特性,当设置竖直方向时,循环得到子控件的`mTop(childTop,包含marginTop)`, **根据模拟测量宽高**调用`setChildFrame(...)`间接调用`child.layout(...)`为子控件指定对应的位置; 然后继续叠加`mTop`.\n\n```java\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        if (mOrientation == VERTICAL) {\n            layoutVertical(l, t, r, b);\n        } else {\n            layoutHorizontal(l, t, r, b);\n        }\n    }\n\n    /**\n     * 以竖直方向为例\n     * \n     * Position the children during a layout pass if the orientation of this\n     * LinearLayout is set to {@link #VERTICAL}.\n     *\n     * @see #getOrientation()\n     * @see #setOrientation(int)\n     * @see #onLayout(boolean, int, int, int, int)\n     * @param left\n     * @param top\n     * @param right\n     * @param bottom\n     */\n    void layoutVertical(int left, int top, int right, int bottom) {\n        final int paddingLeft = mPaddingLeft;\n\n        int childTop;\n        int childLeft;\n\n        // Where right end of child should go\n        final int width = right - left;\n        int childRight = width - mPaddingRight;\n\n        // Space available for child\n        int childSpace = width - paddingLeft - mPaddingRight;\n\n        final int count = getVirtualChildCount();\n\n        final int majorGravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n        final int minorGravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n\n        switch (majorGravity) {\n           case Gravity.BOTTOM:\n               // mTotalLength contains the padding already\n    >>>>       childTop = mPaddingTop + bottom - top - mTotalLength;\n               break;\n\n               // mTotalLength contains the padding already\n           case Gravity.CENTER_VERTICAL:\n    >>>>       childTop = mPaddingTop + (bottom - top - mTotalLength) / 2;\n               break;\n\n           case Gravity.TOP:\n           default:\n               childTop = mPaddingTop;\n               break;\n        }\n\n        for (int i = 0; i < count; i++) {\n            final View child = getVirtualChildAt(i);\n            if (child == null) {\n                childTop += measureNullChild(i);\n            } else if (child.getVisibility() != GONE) {\n                final int childWidth = child.getMeasuredWidth();\n                final int childHeight = child.getMeasuredHeight();\n\n                final LinearLayout.LayoutParams lp =\n                        (LinearLayout.LayoutParams) child.getLayoutParams();\n\n                int gravity = lp.gravity;\n                if (gravity < 0) {\n                    gravity = minorGravity;\n                }\n                final int layoutDirection = getLayoutDirection();\n                final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n                switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                    case Gravity.CENTER_HORIZONTAL:\n                        childLeft = paddingLeft + ((childSpace - childWidth) / 2)\n                                + lp.leftMargin - lp.rightMargin;\n                        break;\n\n                    case Gravity.RIGHT:\n                        childLeft = childRight - childWidth - lp.rightMargin;\n                        break;\n\n                    case Gravity.LEFT:\n                    default:\n                        childLeft = paddingLeft + lp.leftMargin;\n                        break;\n                }\n\n                if (hasDividerBeforeChildAt(i)) {\n                    childTop += mDividerHeight;\n                }\n\n                childTop += lp.topMargin;\n                setChildFrame(child, childLeft, childTop + getLocationOffset(child),\n                        childWidth, childHeight);\n                childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);\n\n                i += getChildrenSkipCount(child, i);\n            }\n        }\n    }\n\n```\n##### `RelativeLayout` ##### \n\n看似很简单的操作.更多的操作已经在初始化或在`onMeasure()`中已经完成,例如<font color=blue>**在`onMeasure()`中子控件之间的\"`toLeftOf`\"等相关view,已经存储入对应数组,并在循环中调用 `applyHorizontalSizeRules(params, myWidth, rules)` 对子控件位置信息进行设置**</font>;\n\n```java\n\n\t@Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        //  The layout has actually already been performed and the positions\n        //  cached.  Apply the cached values to the children.\n        final int count = getChildCount();\n\n        for (int i = 0; i < count; i++) {\n            View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                RelativeLayout.LayoutParams st =\n                        (RelativeLayout.LayoutParams) child.getLayoutParams();\n                child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);\n            }\n        }\n    }\n\n```\n\n##### `FrameLayout` ##### \n<font color=blue>**与`RelativeLayout`相比,多了权重的判断,少了关系判断**.</font>\n\n```java\n\n    @Override\n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n        layoutChildren(left, top, right, bottom, false /* no force left gravity */);\n    }\n\n    void layoutChildren(int left, int top, int right, int bottom, boolean forceLeftGravity) {\n        final int count = getChildCount();\n\n        final int parentLeft = getPaddingLeftWithForeground();\n        final int parentRight = right - left - getPaddingRightWithForeground();\n\n        final int parentTop = getPaddingTopWithForeground();\n        final int parentBottom = bottom - top - getPaddingBottomWithForeground();\n\n        for (int i = 0; i < count; i++) {\n            final View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n\n                final int width = child.getMeasuredWidth();\n                final int height = child.getMeasuredHeight();\n\n                int childLeft;\n                int childTop;\n\n                int gravity = lp.gravity;\n                if (gravity == -1) {\n                    gravity = DEFAULT_CHILD_GRAVITY;\n                }\n\n                final int layoutDirection = getLayoutDirection();\n                final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n                final int verticalGravity = gravity & Gravity.VERTICAL_GRAVITY_MASK;\n\n                switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                    case Gravity.CENTER_HORIZONTAL:\n                        childLeft = parentLeft + (parentRight - parentLeft - width) / 2 +\n                        lp.leftMargin - lp.rightMargin;\n                        break;\n                    case Gravity.RIGHT:\n                        if (!forceLeftGravity) {\n                            childLeft = parentRight - width - lp.rightMargin;\n                            break;\n                        }\n                    case Gravity.LEFT:\n                    default:\n                        childLeft = parentLeft + lp.leftMargin;\n                }\n\n                switch (verticalGravity) {\n                    case Gravity.TOP:\n                        childTop = parentTop + lp.topMargin;\n                        break;\n                    case Gravity.CENTER_VERTICAL:\n                        childTop = parentTop + (parentBottom - parentTop - height) / 2 +\n                        lp.topMargin - lp.bottomMargin;\n                        break;\n                    case Gravity.BOTTOM:\n                        childTop = parentBottom - height - lp.bottomMargin;\n                        break;\n                    default:\n                        childTop = parentTop + lp.topMargin;\n                }\n\n                child.layout(childLeft, childTop, childLeft + width, childTop + height);\n            }\n        }\n    }\n\n```\n---\n### Draw ###\n绘制操作代码如下.\n\n```java\n\n\t/**\n     * Manually render this view (and all of its children) to the given Canvas.\n     * The view must have already done a full layout before this function is\n     * called.  When implementing a view, implement\n     * {@link #onDraw(android.graphics.Canvas)} instead of overriding this method.\n     * If you do need to override this method, call the superclass version.\n     *\n     * @param canvas The Canvas to which the View is rendered.\n     */\n    @CallSuper\n    public void draw(Canvas canvas) {\n        final int privateFlags = mPrivateFlags;\n        final boolean dirtyOpaque = (privateFlags & PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &&\n                (mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);\n        mPrivateFlags = (privateFlags & ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;\n\n        /*\n         * Draw traversal performs several drawing steps which must be executed\n         * in the appropriate order:\n         *\n         *      1. Draw the background\t绘制背景\n         *      2. If necessary, save the canvas' layers to prepare for fading\n         *      3. Draw view's content\t绘制内容\n         *      4. Draw children\t\t绘制子控件\n         *      5. If necessary, draw the fading edges and restore layers\n         *      6. Draw decorations (scrollbars for instance) 绘制附加内容\n         */\n\n        // Step 1, draw the background, if needed\n        int saveCount;\n\n        if (!dirtyOpaque) {\n            drawBackground(canvas);\n        }\n\n        // skip step 2 & 5 if possible (common case)\n        final int viewFlags = mViewFlags;\n        boolean horizontalEdges = (viewFlags & FADING_EDGE_HORIZONTAL) != 0;\n        boolean verticalEdges = (viewFlags & FADING_EDGE_VERTICAL) != 0;\n        if (!verticalEdges && !horizontalEdges) {\n            // Step 3, draw the content\n            if (!dirtyOpaque) onDraw(canvas);\n\n            // Step 4, draw the children\n            dispatchDraw(canvas);\n\n            drawAutofilledHighlight(canvas);\n\n            // Overlay is part of the content and draws beneath Foreground\n            if (mOverlay != null && !mOverlay.isEmpty()) {\n                mOverlay.getOverlayView().dispatchDraw(canvas);\n            }\n\n            // Step 6, draw decorations (foreground, scrollbars)\n            onDrawForeground(canvas);\n\n            // Step 7, draw the default focus highlight\n            drawDefaultFocusHighlight(canvas);\n\n            if (debugDraw()) {\n                debugDrawFocus(canvas);\n            }\n\n            // we're done...\n            return;\n        }\n\n        /*\n         * Here we do the full fledged routine...\n         * (this is an uncommon case where speed matters less,\n         * this is why we repeat some of the tests that have been\n         * done above)\n         */\n\n        boolean drawTop = false;\n        boolean drawBottom = false;\n        boolean drawLeft = false;\n        boolean drawRight = false;\n\n        float topFadeStrength = 0.0f;\n        float bottomFadeStrength = 0.0f;\n        float leftFadeStrength = 0.0f;\n        float rightFadeStrength = 0.0f;\n\n        // Step 2, save the canvas' layers\n        int paddingLeft = mPaddingLeft;\n\n        final boolean offsetRequired = isPaddingOffsetRequired();\n        if (offsetRequired) {\n            paddingLeft += getLeftPaddingOffset();\n        }\n\n        int left = mScrollX + paddingLeft;\n        int right = left + mRight - mLeft - mPaddingRight - paddingLeft;\n        int top = mScrollY + getFadeTop(offsetRequired);\n        int bottom = top + getFadeHeight(offsetRequired);\n\n        if (offsetRequired) {\n            right += getRightPaddingOffset();\n            bottom += getBottomPaddingOffset();\n        }\n\n        final ScrollabilityCache scrollabilityCache = mScrollCache;\n        final float fadeHeight = scrollabilityCache.fadingEdgeLength;\n        int length = (int) fadeHeight;\n\n        // clip the fade length if top and bottom fades overlap\n        // overlapping fades produce odd-looking artifacts\n        if (verticalEdges && (top + length > bottom - length)) {\n            length = (bottom - top) / 2;\n        }\n\n        // also clip horizontal fades if necessary\n        if (horizontalEdges && (left + length > right - length)) {\n            length = (right - left) / 2;\n        }\n\n        if (verticalEdges) {\n            topFadeStrength = Math.max(0.0f, Math.min(1.0f, getTopFadingEdgeStrength()));\n            drawTop = topFadeStrength * fadeHeight > 1.0f;\n            bottomFadeStrength = Math.max(0.0f, Math.min(1.0f, getBottomFadingEdgeStrength()));\n            drawBottom = bottomFadeStrength * fadeHeight > 1.0f;\n        }\n\n        if (horizontalEdges) {\n            leftFadeStrength = Math.max(0.0f, Math.min(1.0f, getLeftFadingEdgeStrength()));\n            drawLeft = leftFadeStrength * fadeHeight > 1.0f;\n            rightFadeStrength = Math.max(0.0f, Math.min(1.0f, getRightFadingEdgeStrength()));\n            drawRight = rightFadeStrength * fadeHeight > 1.0f;\n        }\n\n        saveCount = canvas.getSaveCount();\n\n        int solidColor = getSolidColor();\n        if (solidColor == 0) {\n            final int flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;\n\n            if (drawTop) {\n                canvas.saveLayer(left, top, right, top + length, null, flags);\n            }\n\n            if (drawBottom) {\n                canvas.saveLayer(left, bottom - length, right, bottom, null, flags);\n            }\n\n            if (drawLeft) {\n                canvas.saveLayer(left, top, left + length, bottom, null, flags);\n            }\n\n            if (drawRight) {\n                canvas.saveLayer(right - length, top, right, bottom, null, flags);\n            }\n        } else {\n            scrollabilityCache.setFadeColor(solidColor);\n        }\n\n        // Step 3, draw the content\n        if (!dirtyOpaque) onDraw(canvas);\n\n        // Step 4, draw the children\n        dispatchDraw(canvas);\n\n        // Step 5, draw the fade effect and restore layers\n        final Paint p = scrollabilityCache.paint;\n        final Matrix matrix = scrollabilityCache.matrix;\n        final Shader fade = scrollabilityCache.shader;\n\n        if (drawTop) {\n            matrix.setScale(1, fadeHeight * topFadeStrength);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, top, right, top + length, p);\n        }\n\n        if (drawBottom) {\n            matrix.setScale(1, fadeHeight * bottomFadeStrength);\n            matrix.postRotate(180);\n            matrix.postTranslate(left, bottom);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, bottom - length, right, bottom, p);\n        }\n\n        if (drawLeft) {\n            matrix.setScale(1, fadeHeight * leftFadeStrength);\n            matrix.postRotate(-90);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, top, left + length, bottom, p);\n        }\n\n        if (drawRight) {\n            matrix.setScale(1, fadeHeight * rightFadeStrength);\n            matrix.postRotate(90);\n            matrix.postTranslate(right, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(right - length, top, right, bottom, p);\n        }\n\n        canvas.restoreToCount(saveCount);\n\n        drawAutofilledHighlight(canvas);\n\n        // Overlay is part of the content and draws beneath Foreground\n        if (mOverlay != null && !mOverlay.isEmpty()) {\n            mOverlay.getOverlayView().dispatchDraw(canvas);\n        }\n\n        // Step 6, draw decorations (foreground, scrollbars)\n        onDrawForeground(canvas);\n\n        if (debugDraw()) {\n            debugDrawFocus(canvas);\n        }\n    }\n\n```\n#### 1. 绘制背景 ####\n\n```java\n\n    /**\n     * /sdk/sources/android-26/android/view/View.java\n     * \n     * Draws the background onto the specified canvas.\n     * \n     * @param canvas Canvas on which to draw the background\n     */\n    private void drawBackground(Canvas canvas) {\n        final Drawable background = mBackground;\n        if (background == null) {\n            return;\n        }\n\n        setBackgroundBounds();\n\n        // Attempt to use a display list if requested.\n        if (canvas.isHardwareAccelerated() && mAttachInfo != null\n                && mAttachInfo.mThreadedRenderer != null) {\n            mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);\n\n            final RenderNode renderNode = mBackgroundRenderNode;\n            if (renderNode != null && renderNode.isValid()) {\n                setBackgroundRenderNodeProperties(renderNode);\n                ((DisplayListCanvas) canvas).drawRenderNode(renderNode);\n                return;\n            }\n        }\n\n        final int scrollX = mScrollX;\n        final int scrollY = mScrollY;\n        if ((scrollX | scrollY) == 0) {\n            background.draw(canvas);\n        } else {\n            canvas.translate(scrollX, scrollY);\n            background.draw(canvas);\n            canvas.translate(-scrollX, -scrollY);\n        }\n    }\n\n```\n\n#### 2. 保存画布用于⑤绘制渐变 ####\n\n```java\n\n\t\t// /sdk/sources/android-26/android/view/View.java\n\t\t.....\n\t\t// Step 2, save the canvas' layers\n        int paddingLeft = mPaddingLeft;\n\n        final boolean offsetRequired = isPaddingOffsetRequired();\n        if (offsetRequired) {\n            paddingLeft += getLeftPaddingOffset();\n        }\n\n        int left = mScrollX + paddingLeft;\n        int right = left + mRight - mLeft - mPaddingRight - paddingLeft;\n        int top = mScrollY + getFadeTop(offsetRequired);\n        int bottom = top + getFadeHeight(offsetRequired);\n\n        if (offsetRequired) {\n            right += getRightPaddingOffset();\n            bottom += getBottomPaddingOffset();\n        }\n\n        final ScrollabilityCache scrollabilityCache = mScrollCache;\n        final float fadeHeight = scrollabilityCache.fadingEdgeLength;\n        int length = (int) fadeHeight;\n\n        // clip the fade length if top and bottom fades overlap\n        // overlapping fades produce odd-looking artifacts\n        if (verticalEdges && (top + length > bottom - length)) {\n            length = (bottom - top) / 2;\n        }\n\n        // also clip horizontal fades if necessary\n        if (horizontalEdges && (left + length > right - length)) {\n            length = (right - left) / 2;\n        }\n\n        if (verticalEdges) {\n            topFadeStrength = Math.max(0.0f, Math.min(1.0f, getTopFadingEdgeStrength()));\n            drawTop = topFadeStrength * fadeHeight > 1.0f;\n            bottomFadeStrength = Math.max(0.0f, Math.min(1.0f, getBottomFadingEdgeStrength()));\n            drawBottom = bottomFadeStrength * fadeHeight > 1.0f;\n        }\n\n        if (horizontalEdges) {\n            leftFadeStrength = Math.max(0.0f, Math.min(1.0f, getLeftFadingEdgeStrength()));\n            drawLeft = leftFadeStrength * fadeHeight > 1.0f;\n            rightFadeStrength = Math.max(0.0f, Math.min(1.0f, getRightFadingEdgeStrength()));\n            drawRight = rightFadeStrength * fadeHeight > 1.0f;\n        }\n\n        saveCount = canvas.getSaveCount();\n\n        int solidColor = getSolidColor();\n        if (solidColor == 0) {\n            final int flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;\n\n            if (drawTop) {\n                canvas.saveLayer(left, top, right, top + length, null, flags);\n            }\n\n            if (drawBottom) {\n                canvas.saveLayer(left, bottom - length, right, bottom, null, flags);\n            }\n\n            if (drawLeft) {\n                canvas.saveLayer(left, top, left + length, bottom, null, flags);\n            }\n\n            if (drawRight) {\n                canvas.saveLayer(right - length, top, right, bottom, null, flags);\n            }\n        } else {\n            scrollabilityCache.setFadeColor(solidColor);\n        }\n\t\t.....\n\n```\n#### 3. 绘制内容 ####\n```java\n\n   /**\n\t * // /sdk/sources/android-26/android/view/View.java\n     * Implement this to do your drawing.\n     *\n     * @param canvas the canvas on which the background will be drawn\n     */\n    protected void onDraw(Canvas canvas) {\n    }\n\n```\n#### 4. 绘制子控件 ####\n步骤:\n1. 设置子控件的LayoutAnimation并设置动画监听;\n2. 判断`clipToPadding`,是否裁剪;\n3. 循环调用子控件绘制`drawChild(canvas, child, drawingTime)`,保存裁剪信息;\n4. 判断动画是否结束并回调动画结束函数;\n\n\n```java\n\n\t// /sdk/sources/android-26/android/view/ViewGroup.java\n    @Override\n    protected void dispatchDraw(Canvas canvas) {\n        boolean usingRenderNodeProperties = canvas.isRecordingFor(mRenderNode);\n        final int childrenCount = mChildrenCount;\n        final View[] children = mChildren;\n        int flags = mGroupFlags;\n\n        if ((flags & FLAG_RUN_ANIMATION) != 0 && canAnimate()) {\n            final boolean buildCache = !isHardwareAccelerated();\n            for (int i = 0; i < childrenCount; i++) {\n                final View child = children[i];\n                if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE) {\n                    final LayoutParams params = child.getLayoutParams();\n                    attachLayoutAnimationParameters(child, params, i, childrenCount);\n                    bindLayoutAnimation(child);\n                }\n            }\n\n            final LayoutAnimationController controller = mLayoutAnimationController;\n            if (controller.willOverlap()) {\n                mGroupFlags |= FLAG_OPTIMIZE_INVALIDATE;\n            }\n\n            controller.start();\n\n            mGroupFlags &= ~FLAG_RUN_ANIMATION;\n            mGroupFlags &= ~FLAG_ANIMATION_DONE;\n\n            if (mAnimationListener != null) {\n                mAnimationListener.onAnimationStart(controller.getAnimation());\n            }\n        }\n\n        int clipSaveCount = 0;\n        final boolean clipToPadding = (flags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK;\n        if (clipToPadding) {\n            clipSaveCount = canvas.save(Canvas.CLIP_SAVE_FLAG);\n            canvas.clipRect(mScrollX + mPaddingLeft, mScrollY + mPaddingTop,\n                    mScrollX + mRight - mLeft - mPaddingRight,\n                    mScrollY + mBottom - mTop - mPaddingBottom);\n        }\n\n        // We will draw our child's animation, let's reset the flag\n        mPrivateFlags &= ~PFLAG_DRAW_ANIMATION;\n        mGroupFlags &= ~FLAG_INVALIDATE_REQUIRED;\n\n        boolean more = false;\n        final long drawingTime = getDrawingTime();\n\n        if (usingRenderNodeProperties) canvas.insertReorderBarrier();\n        final int transientCount = mTransientIndices == null ? 0 : mTransientIndices.size();\n        int transientIndex = transientCount != 0 ? 0 : -1;\n        // Only use the preordered list if not HW accelerated, since the HW pipeline will do the\n        // draw reordering internally\n        final ArrayList<View> preorderedList = usingRenderNodeProperties\n                ? null : buildOrderedChildList();\n        final boolean customOrder = preorderedList == null\n                && isChildrenDrawingOrderEnabled();\n        for (int i = 0; i < childrenCount; i++) {\n            while (transientIndex >= 0 && mTransientIndices.get(transientIndex) == i) {\n                final View transientChild = mTransientViews.get(transientIndex);\n                if ((transientChild.mViewFlags & VISIBILITY_MASK) == VISIBLE ||\n                        transientChild.getAnimation() != null) {\n                    more |= drawChild(canvas, transientChild, drawingTime);\n                }\n                transientIndex++;\n                if (transientIndex >= transientCount) {\n                    transientIndex = -1;\n                }\n            }\n\n            final int childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);\n            final View child = getAndVerifyPreorderedView(preorderedList, children, childIndex);\n            if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) {\n                more |= drawChild(canvas, child, drawingTime);\n            }\n        }\n        while (transientIndex >= 0) {\n            // there may be additional transient views after the normal views\n            final View transientChild = mTransientViews.get(transientIndex);\n            if ((transientChild.mViewFlags & VISIBILITY_MASK) == VISIBLE ||\n                    transientChild.getAnimation() != null) {\n                more |= drawChild(canvas, transientChild, drawingTime);\n            }\n            transientIndex++;\n            if (transientIndex >= transientCount) {\n                break;\n            }\n        }\n        if (preorderedList != null) preorderedList.clear();\n\n        // Draw any disappearing views that have animations\n        if (mDisappearingChildren != null) {\n            final ArrayList<View> disappearingChildren = mDisappearingChildren;\n            final int disappearingCount = disappearingChildren.size() - 1;\n            // Go backwards -- we may delete as animations finish\n            for (int i = disappearingCount; i >= 0; i--) {\n                final View child = disappearingChildren.get(i);\n                more |= drawChild(canvas, child, drawingTime);\n            }\n        }\n        if (usingRenderNodeProperties) canvas.insertInorderBarrier();\n\n        if (debugDraw()) {\n            onDebugDraw(canvas);\n        }\n\n        if (clipToPadding) {\n            canvas.restoreToCount(clipSaveCount);\n        }\n\n        // mGroupFlags might have been updated by drawChild()\n        flags = mGroupFlags;\n\n        if ((flags & FLAG_INVALIDATE_REQUIRED) == FLAG_INVALIDATE_REQUIRED) {\n            invalidate(true);\n        }\n\n        if ((flags & FLAG_ANIMATION_DONE) == 0 && (flags & FLAG_NOTIFY_ANIMATION_LISTENER) == 0 &&\n                mLayoutAnimationController.isDone() && !more) {\n            // We want to erase the drawing cache and notify the listener after the\n            // next frame is drawn because one extra invalidate() is caused by\n            // drawChild() after the animation is over\n            mGroupFlags |= FLAG_NOTIFY_ANIMATION_LISTENER;\n            final Runnable end = new Runnable() {\n               @Override\n               public void run() {\n                   notifyAnimationListener();\n               }\n            };\n            post(end);\n        }\n    }\n\n    /**\n     * Draw {@link View#isAutofilled()} highlight over view if the view is autofilled.\n     *\n     * @param canvas The canvas to draw on\n     */\n    private void drawAutofilledHighlight(@NonNull Canvas canvas) {\n        if (isAutofilled()) {\n            Drawable autofilledHighlight = getAutofilledDrawable();\n\n            if (autofilledHighlight != null) {\n                autofilledHighlight.setBounds(0, 0, getWidth(), getHeight());\n                autofilledHighlight.draw(canvas);\n            }\n        }\n    }\n\n```\n#### 5. 绘制渐变 ####\n\n```java\n\n\t\t// /sdk/sources/android-26/android/view/View.java\n\t\t......\n        final Paint p = scrollabilityCache.paint;\n        final Matrix matrix = scrollabilityCache.matrix;\n        final Shader fade = scrollabilityCache.shader;\n\n        if (drawTop) {\n            matrix.setScale(1, fadeHeight * topFadeStrength);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, top, right, top + length, p);\n        }\n\n        if (drawBottom) {\n            matrix.setScale(1, fadeHeight * bottomFadeStrength);\n            matrix.postRotate(180);\n            matrix.postTranslate(left, bottom);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, bottom - length, right, bottom, p);\n        }\n\n        if (drawLeft) {\n            matrix.setScale(1, fadeHeight * leftFadeStrength);\n            matrix.postRotate(-90);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, top, left + length, bottom, p);\n        }\n\n        if (drawRight) {\n            matrix.setScale(1, fadeHeight * rightFadeStrength);\n            matrix.postRotate(90);\n            matrix.postTranslate(right, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(right - length, top, right, bottom, p);\n        }\n\n        canvas.restoreToCount(saveCount);\n\n        drawAutofilledHighlight(canvas);\n\n        // Overlay is part of the content and draws beneath Foreground\n        if (mOverlay != null && !mOverlay.isEmpty()) {\n            mOverlay.getOverlayView().dispatchDraw(canvas);\n        }\n\n\t\t......\n\n```\n#### 6. 绘制装饰附加内容 ####\n```java\n\n    /**\n\t * // /sdk/sources/android-26/android/view/View.java\n     * Draw any foreground content for this view.\n     *\n     * <p>Foreground content may consist of scroll bars, a {@link #setForeground foreground}\n     * drawable or other view-specific decorations. The foreground is drawn on top of the\n     * primary view content.</p>\n     *\n     * @param canvas canvas to draw into\n     */\n    public void onDrawForeground(Canvas canvas) {\n        onDrawScrollIndicators(canvas);\n        onDrawScrollBars(canvas);\n\n        final Drawable foreground = mForegroundInfo != null ? mForegroundInfo.mDrawable : null;\n        if (foreground != null) {\n            if (mForegroundInfo.mBoundsChanged) {\n                mForegroundInfo.mBoundsChanged = false;\n                final Rect selfBounds = mForegroundInfo.mSelfBounds;\n                final Rect overlayBounds = mForegroundInfo.mOverlayBounds;\n\n                if (mForegroundInfo.mInsidePadding) {\n                    selfBounds.set(0, 0, getWidth(), getHeight());\n                } else {\n                    selfBounds.set(getPaddingLeft(), getPaddingTop(),\n                            getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());\n                }\n\n                final int ld = getLayoutDirection();\n                Gravity.apply(mForegroundInfo.mGravity, foreground.getIntrinsicWidth(),\n                        foreground.getIntrinsicHeight(), selfBounds, overlayBounds, ld);\n                foreground.setBounds(overlayBounds);\n            }\n\n            foreground.draw(canvas);\n        }\n    }\n\n```\n\n\n---","source":"_posts/Android之自定义控件——View测量,布局,绘制.md","raw":"---\n\ntitle: 控件的测量,布局,绘制过程\ncategories: \"android 总结\"\ntags: \n     - android\n     - 测量\n     - 布局\n     - 绘制\n \n---\n# 控件的测量,布局,绘制过程 #\n\n\t目录:\n\t\t- 测量\n\t\t\t1. 测量之MeasureSpec与LayoutParams\n\t\t\t2. View # onMeasure(int,int)\n\t\t\t3. ViewGroup # measureChildren()\n\t\t\t4. 测量某个View的宽高的方式\n\t\t- 布局\n\t\t\t1. View # layout(int,int,int,int)\n\t\t\t2. View # onLayout()\n\t\t\t\t1. LinearLayout\n\t\t\t\t2. RelativeLayout\n\t\t\t\t3. FrameLayout\n\t\t- 绘制\n\t\t\tView # draw(Canvas)\n\t\t\t\t1. Draw the background\t绘制背景\n\t\t\t\t2. If necessary, save the canvas' layers to prepare for fading\n                3. Draw view's content\t绘制内容\n                4. Draw children\t\t绘制子控件\n                5. If necessary, draw the fading edges and restore layers\n                6. Draw decorations (scrollbars for instance) 绘制附加内容\n\n\t参考自:\n\t\t\t1. 《 Android 开发艺术探索 》 : Page 174\n\t\t\t2. Android开发之自定义控件(二)---onLayout详解 : http://blog.csdn.net/dmk877/article/details/49632959\n\t\t\t\n<!-- more -->\n---\n### 测量 ###\n\n\n#### 1. 测量之`MeasureSpec`与`LayoutParams` ####\n\n[**`WindowManager$LayoutParams` 友情链接 点击此处** ](https://github.com/SchafferWang0818/SchafferBaseLibrary/blob/master/notes/Android%E4%B9%8B%E6%98%BE%E7%A4%BA%E2%80%94%E2%80%94WindowManager.md#windowmanagerlayoutparams)\n\n> 《 Android 开发艺术探索 》\n> 对于 `DecorView` ，其 `MeasureSpec` 由窗口的尺寸和其自身的 `LayoutParams` 来共同决定;\n> 对于普通 `View`，其 `MeasureSpec` 由<font color= red> **父容器** </font>的`MeasureSpec`和自身的 `LayoutParams` 来共同决定。\n> <font color= red> **`parentSize`指父容器当前剩余的空间大小。**</font>\n> \n\n![MeasureSpec](https://i.imgur.com/vfDqiS1.png)\n\n\n```java\n\n\t//ViewGroup.java\n\t\n    protected void measureChildWithMargins(View child,\n            int parentWidthMeasureSpec, int widthUsed,\n            int parentHeightMeasureSpec, int heightUsed) {\n        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, \n\t\t\t\tlp.width);\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed, \n\t\t\t\tlp.height);\n\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    }\n\n\tpublic static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n\n        int size = Math.max(0, specSize - padding);\n\n        int resultSize = 0;\n        int resultMode = 0;\n\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        //noinspection ResourceType\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n\n```\n---\n#### 2. `View # onMeasure(int,int)`####\n> 1.  `MeasureSpec.getSize(measureSpec)` 就是`View`测量后的大小,在`layout()`阶段确定; \n> 2. `getSuggestedMinimumWidth/Height()`设置默认大小:\n>     - 当未设置背景时,由`android:minWidth/minHeight`决定;\n>     - 当已设置背景时,由背景Drawable原始大小最小值与`android:minWidth/minHeight`决定; \n> 3. <font color= red>**依照上表, 当自定义`View` 直接继承自`View`重写`onMeasure()`并设置`wrap_content`时,相当于直接填充了父容器剩余所有空间`match_parent`。可以通过`onMeasure()`设置宽高默认值解决**</font>\n\n```java\n\tprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\t\tif( widthMode==MeasureSpec.AT_MOST \n\t\t\t\t&& heightMode==MeasureSpec.AT_MOST){\n\t\t\tsetMeasureDimension(mWidth , mHeight);  \n\t\t}else if(widthMode==MeasureSpec.AT_MOST){\n\t\t\tsetMeasureDimension(mWidth , heightSize);\n\t\t}else if(heightMode==MeasureSpec.AT_MOST){\n\t\t\tsetMeasureDimension(widthSize , mHeight);\n\t\t}\n    }\t  \n\n```\t\n\n\n```java\n\t/*\n     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     * @param heightMeasureSpec vertical space requirements as imposed by the parent.\n     *                         The requirements are encoded with\n     *                         {@link android.view.View.MeasureSpec}.\n     *\n     * @see #getMeasuredWidth()\n     * @see #getMeasuredHeight()\n     * @see #setMeasuredDimension(int, int)\n     * @see #getSuggestedMinimumHeight()\n     * @see #getSuggestedMinimumWidth()\n     * @see android.view.View.MeasureSpec#getMode(int)\n     * @see android.view.View.MeasureSpec#getSize(int)\n     */\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\t// 设置宽高的测量值\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n\n\t/**\n\t * 设置默认值\n     * Utility to return a default size. Uses the supplied size if the\n     * MeasureSpec imposed no constraints. Will get larger if allowed\n     * by the MeasureSpec.\n     *\n     * @param size Default size for this view\n     * @param measureSpec Constraints imposed by the parent\n     * @return The size this view should be.\n     */\n    public static int getDefaultSize(int size, int measureSpec) {\n        int result = size;\n        int specMode = MeasureSpec.getMode(measureSpec);\n        int specSize = MeasureSpec.getSize(measureSpec);\n\n        switch (specMode) {\n        case MeasureSpec.UNSPECIFIED:\n            result = size;\n            break;\n        case MeasureSpec.AT_MOST:\n        case MeasureSpec.EXACTLY:\n            result = specSize;\n            break;\n        }\n        return result;\n    }\n```\n---\n#### 3. `ViewGroup # measureChildren()` ####\n\n\n\n```java\n\n    /**\n\t * ViewGroup.java \n\t * 循环创建子元素的测量算子和子元素的LayoutParams通过子元素的measure()进行测量;\n     * Ask all of the children of this view to measure themselves, taking into\n     * account both the MeasureSpec requirements for this view and its padding.\n     * We skip children that are in the GONE state The heavy lifting is done in\n     * getChildMeasureSpec.\n     *\n     * @param widthMeasureSpec The width requirements for this view\n     * @param heightMeasureSpec The height requirements for this view\n     */\n    protected void measureChildren(int widthMeasureSpec, int heightMeasureSpec) {\n        final int size = mChildrenCount;\n        final View[] children = mChildren;\n        for (int i = 0; i < size; ++i) {\n            final View child = children[i];\n            if ((child.mViewFlags & VISIBILITY_MASK) != GONE) {\n                measureChild(child, widthMeasureSpec, heightMeasureSpec);\n            }\n        }\n    }\n\n```\n---\n\n#### 4. 测量某个View的宽高的方式 ####\n\n1. `Activity/View # onWindowFocusChanged(boolean)`\n\n\t```java\n\n    @Override\n    public void onWindowFocusChanged(boolean hasWindowFocus) {\n        super.onWindowFocusChanged(hasWindowFocus);\n        if (hasWindowFocus) {\n            //measureLines();\n        }\n    }\n\n\t```\n2. `View # post(Runnable)`\n\t```java\n\n\tview.post(new Runnable() {\n\t\n\t    @Override\n\t    public void run() {\n\t        view.getWidth(); // 获取宽度\n\t        view.getHeight(); // 获取高度\n\t    }\n\t});\n\n\t```\n3. `ViewTreeObserver`\n\t```java\n\tview.getViewTreeObserver().addOnGlobalLayoutListener(\n\t        new ViewTreeObserver.OnGlobalLayoutListener() {\n\t\n\t    @Override\n\t    public void onGlobalLayout() {\n\t        if (Build.VERSION.SDK_INT >= 16) {\n\t            view.getViewTreeObserver()\n\t                    .removeOnGlobalLayoutListener(this);\n\t        }\n\t        else {\n\t            view.getViewTreeObserver()\n\t                    .removeGlobalOnLayoutListener(this);\n\t        }\n\t        view.getWidth(); // 获取宽度\n\t        view.getHeight(); // 获取高度\n\t    }\n\t});\n\n\t```\n4. `View # measure(int,int)`\n\n\t- 设置固定数值\n\t\t```java\n\n\t\tint width = View.MeasureSpec.makeMeasureSpec(100,\n        \t\tView.MeasureSpec.EXACTLY);\n\t\tint height = View.MeasureSpec.makeMeasureSpec(100,\n\t\t        View.MeasureSpec.EXACTLY);\n\t\tview.measure(width, height);\n\n\t\t```\n\t- wrap_content\n\t\t```java\n\n\t\tint width = View.MeasureSpec.makeMeasureSpec((1<<30)-1,\n        \t\tView.MeasureSpec.AT_MOST);\n\t\tint height = View.MeasureSpec.makeMeasureSpec((1<<30)-1,\n\t\t        View.MeasureSpec.AT_MOST);\n\t\tview.measure(width, height);\n\n\t\t```\n\n---\n### 布局`Layout` ###\n> 《 Android 开发艺术探索 》: <font color=orange>**`ViewGroup`用来确定子元素的位置, `layout()`确定的是`ViewGroup`本身的位置,而`onLayout()`确定的是所有子控件的位置;.**</font>\n> onLayout详解 : <font color=orange>**自定义控件的第二步`onLayout`即确定控件的位置**</font>\n\n\n\n#### 1. `layout(int,int,int,int)` ####\n主要有以下步骤:\n1. <font color=red>**`View # setFrame(l, t, r, b)`初始化mLeft、mRight、mTop、mBottom，设置当前`View/ViewGroup`的四个顶点的位置;**</font>\n2. <font color=green>**`View # onLayout(changed, l, t, r, b)`确定子控件位置;**</font>\n3. <font color=blue>**判断`viewGroup.mOnLayoutChangeListeners`的存在,并调用`View $ OnLayoutChangeListener # onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB)`; **</font>\n\n```java\n\n\t/**\n     * android-26/android.view.ViewGroup.java\n     * ViewGroup # layout(int l, int t, int r, int b)\n     */\n    @Override\n    public final void layout(int l, int t, int r, int b) {\n        if (!mSuppressLayout && (mTransition == null || !mTransition.isChangingLayout())) {\n            if (mTransition != null) {\n                mTransition.layoutChange(this);\n            }\n            super.layout(l, t, r, b);\n        } else {\n            // record the fact that we noop'd it; request layout when transition finishes\n            mLayoutCalledWhileSuppressed = true;\n        }\n    }\n\t\n\t-----------------------------------------------------------------------\n\n    /**\n     * android-26/android.view.View.java\n     * View # layout(int l, int t, int r, int b)\n     * \n     * Assign a size and position to a view and all of its\n     * descendants\n     *\n     * <p>This is the second phase of the layout mechanism.\n     * (The first is measuring). In this phase, each parent calls\n     * layout on all of its children to position them.\n     * This is typically done using the child measurements\n     * that were stored in the measure pass().</p>\n     *\n     * <p>Derived classes should not override this method.\n     * Derived classes with children should override\n     * onLayout. In that method, they should\n     * call layout on each of their children.</p>\n     *\n     * @param l Left position, relative to parent\n     * @param t Top position, relative to parent\n     * @param r Right position, relative to parent\n     * @param b Bottom position, relative to parent\n     */\n    @SuppressWarnings({\"unchecked\"})\n    public void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n\n        int oldL = mLeft;\n        int oldT = mTop;\n        int oldB = mBottom;\n        int oldR = mRight;\n\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            onLayout(changed, l, t, r, b);\n\n            if (shouldDrawRoundScrollbar()) {\n                if(mRoundScrollbarRenderer == null) {\n                    mRoundScrollbarRenderer = new RoundScrollbarRenderer(this);\n                }\n            } else {\n                mRoundScrollbarRenderer = null;\n            }\n\n            mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;\n\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnLayoutChangeListeners != null) {\n                ArrayList<OnLayoutChangeListener> listenersCopy =\n                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();\n                int numListeners = listenersCopy.size();\n                for (int i = 0; i < numListeners; ++i) {\n                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);\n                }\n            }\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n\n        if ((mPrivateFlags3 & PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT) != 0) {\n            mPrivateFlags3 &= ~PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT;\n            notifyEnterOrExitForAutoFillIfNeeded(true);\n        }\n    }\n```\n---\n#### 2. `View # onLayout()` ####\n\n以 LinearLayout、RelativeLayout、FrameLayout 为例,代码如下.\n\n\n##### `LinearLayout`\n\n以竖直方向为例,由于 `LinearLayout`特性,当设置竖直方向时,循环得到子控件的`mTop(childTop,包含marginTop)`, **根据模拟测量宽高**调用`setChildFrame(...)`间接调用`child.layout(...)`为子控件指定对应的位置; 然后继续叠加`mTop`.\n\n```java\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        if (mOrientation == VERTICAL) {\n            layoutVertical(l, t, r, b);\n        } else {\n            layoutHorizontal(l, t, r, b);\n        }\n    }\n\n    /**\n     * 以竖直方向为例\n     * \n     * Position the children during a layout pass if the orientation of this\n     * LinearLayout is set to {@link #VERTICAL}.\n     *\n     * @see #getOrientation()\n     * @see #setOrientation(int)\n     * @see #onLayout(boolean, int, int, int, int)\n     * @param left\n     * @param top\n     * @param right\n     * @param bottom\n     */\n    void layoutVertical(int left, int top, int right, int bottom) {\n        final int paddingLeft = mPaddingLeft;\n\n        int childTop;\n        int childLeft;\n\n        // Where right end of child should go\n        final int width = right - left;\n        int childRight = width - mPaddingRight;\n\n        // Space available for child\n        int childSpace = width - paddingLeft - mPaddingRight;\n\n        final int count = getVirtualChildCount();\n\n        final int majorGravity = mGravity & Gravity.VERTICAL_GRAVITY_MASK;\n        final int minorGravity = mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;\n\n        switch (majorGravity) {\n           case Gravity.BOTTOM:\n               // mTotalLength contains the padding already\n    >>>>       childTop = mPaddingTop + bottom - top - mTotalLength;\n               break;\n\n               // mTotalLength contains the padding already\n           case Gravity.CENTER_VERTICAL:\n    >>>>       childTop = mPaddingTop + (bottom - top - mTotalLength) / 2;\n               break;\n\n           case Gravity.TOP:\n           default:\n               childTop = mPaddingTop;\n               break;\n        }\n\n        for (int i = 0; i < count; i++) {\n            final View child = getVirtualChildAt(i);\n            if (child == null) {\n                childTop += measureNullChild(i);\n            } else if (child.getVisibility() != GONE) {\n                final int childWidth = child.getMeasuredWidth();\n                final int childHeight = child.getMeasuredHeight();\n\n                final LinearLayout.LayoutParams lp =\n                        (LinearLayout.LayoutParams) child.getLayoutParams();\n\n                int gravity = lp.gravity;\n                if (gravity < 0) {\n                    gravity = minorGravity;\n                }\n                final int layoutDirection = getLayoutDirection();\n                final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n                switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                    case Gravity.CENTER_HORIZONTAL:\n                        childLeft = paddingLeft + ((childSpace - childWidth) / 2)\n                                + lp.leftMargin - lp.rightMargin;\n                        break;\n\n                    case Gravity.RIGHT:\n                        childLeft = childRight - childWidth - lp.rightMargin;\n                        break;\n\n                    case Gravity.LEFT:\n                    default:\n                        childLeft = paddingLeft + lp.leftMargin;\n                        break;\n                }\n\n                if (hasDividerBeforeChildAt(i)) {\n                    childTop += mDividerHeight;\n                }\n\n                childTop += lp.topMargin;\n                setChildFrame(child, childLeft, childTop + getLocationOffset(child),\n                        childWidth, childHeight);\n                childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);\n\n                i += getChildrenSkipCount(child, i);\n            }\n        }\n    }\n\n```\n##### `RelativeLayout` ##### \n\n看似很简单的操作.更多的操作已经在初始化或在`onMeasure()`中已经完成,例如<font color=blue>**在`onMeasure()`中子控件之间的\"`toLeftOf`\"等相关view,已经存储入对应数组,并在循环中调用 `applyHorizontalSizeRules(params, myWidth, rules)` 对子控件位置信息进行设置**</font>;\n\n```java\n\n\t@Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        //  The layout has actually already been performed and the positions\n        //  cached.  Apply the cached values to the children.\n        final int count = getChildCount();\n\n        for (int i = 0; i < count; i++) {\n            View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                RelativeLayout.LayoutParams st =\n                        (RelativeLayout.LayoutParams) child.getLayoutParams();\n                child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);\n            }\n        }\n    }\n\n```\n\n##### `FrameLayout` ##### \n<font color=blue>**与`RelativeLayout`相比,多了权重的判断,少了关系判断**.</font>\n\n```java\n\n    @Override\n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n        layoutChildren(left, top, right, bottom, false /* no force left gravity */);\n    }\n\n    void layoutChildren(int left, int top, int right, int bottom, boolean forceLeftGravity) {\n        final int count = getChildCount();\n\n        final int parentLeft = getPaddingLeftWithForeground();\n        final int parentRight = right - left - getPaddingRightWithForeground();\n\n        final int parentTop = getPaddingTopWithForeground();\n        final int parentBottom = bottom - top - getPaddingBottomWithForeground();\n\n        for (int i = 0; i < count; i++) {\n            final View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n\n                final int width = child.getMeasuredWidth();\n                final int height = child.getMeasuredHeight();\n\n                int childLeft;\n                int childTop;\n\n                int gravity = lp.gravity;\n                if (gravity == -1) {\n                    gravity = DEFAULT_CHILD_GRAVITY;\n                }\n\n                final int layoutDirection = getLayoutDirection();\n                final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n                final int verticalGravity = gravity & Gravity.VERTICAL_GRAVITY_MASK;\n\n                switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                    case Gravity.CENTER_HORIZONTAL:\n                        childLeft = parentLeft + (parentRight - parentLeft - width) / 2 +\n                        lp.leftMargin - lp.rightMargin;\n                        break;\n                    case Gravity.RIGHT:\n                        if (!forceLeftGravity) {\n                            childLeft = parentRight - width - lp.rightMargin;\n                            break;\n                        }\n                    case Gravity.LEFT:\n                    default:\n                        childLeft = parentLeft + lp.leftMargin;\n                }\n\n                switch (verticalGravity) {\n                    case Gravity.TOP:\n                        childTop = parentTop + lp.topMargin;\n                        break;\n                    case Gravity.CENTER_VERTICAL:\n                        childTop = parentTop + (parentBottom - parentTop - height) / 2 +\n                        lp.topMargin - lp.bottomMargin;\n                        break;\n                    case Gravity.BOTTOM:\n                        childTop = parentBottom - height - lp.bottomMargin;\n                        break;\n                    default:\n                        childTop = parentTop + lp.topMargin;\n                }\n\n                child.layout(childLeft, childTop, childLeft + width, childTop + height);\n            }\n        }\n    }\n\n```\n---\n### Draw ###\n绘制操作代码如下.\n\n```java\n\n\t/**\n     * Manually render this view (and all of its children) to the given Canvas.\n     * The view must have already done a full layout before this function is\n     * called.  When implementing a view, implement\n     * {@link #onDraw(android.graphics.Canvas)} instead of overriding this method.\n     * If you do need to override this method, call the superclass version.\n     *\n     * @param canvas The Canvas to which the View is rendered.\n     */\n    @CallSuper\n    public void draw(Canvas canvas) {\n        final int privateFlags = mPrivateFlags;\n        final boolean dirtyOpaque = (privateFlags & PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &&\n                (mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);\n        mPrivateFlags = (privateFlags & ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;\n\n        /*\n         * Draw traversal performs several drawing steps which must be executed\n         * in the appropriate order:\n         *\n         *      1. Draw the background\t绘制背景\n         *      2. If necessary, save the canvas' layers to prepare for fading\n         *      3. Draw view's content\t绘制内容\n         *      4. Draw children\t\t绘制子控件\n         *      5. If necessary, draw the fading edges and restore layers\n         *      6. Draw decorations (scrollbars for instance) 绘制附加内容\n         */\n\n        // Step 1, draw the background, if needed\n        int saveCount;\n\n        if (!dirtyOpaque) {\n            drawBackground(canvas);\n        }\n\n        // skip step 2 & 5 if possible (common case)\n        final int viewFlags = mViewFlags;\n        boolean horizontalEdges = (viewFlags & FADING_EDGE_HORIZONTAL) != 0;\n        boolean verticalEdges = (viewFlags & FADING_EDGE_VERTICAL) != 0;\n        if (!verticalEdges && !horizontalEdges) {\n            // Step 3, draw the content\n            if (!dirtyOpaque) onDraw(canvas);\n\n            // Step 4, draw the children\n            dispatchDraw(canvas);\n\n            drawAutofilledHighlight(canvas);\n\n            // Overlay is part of the content and draws beneath Foreground\n            if (mOverlay != null && !mOverlay.isEmpty()) {\n                mOverlay.getOverlayView().dispatchDraw(canvas);\n            }\n\n            // Step 6, draw decorations (foreground, scrollbars)\n            onDrawForeground(canvas);\n\n            // Step 7, draw the default focus highlight\n            drawDefaultFocusHighlight(canvas);\n\n            if (debugDraw()) {\n                debugDrawFocus(canvas);\n            }\n\n            // we're done...\n            return;\n        }\n\n        /*\n         * Here we do the full fledged routine...\n         * (this is an uncommon case where speed matters less,\n         * this is why we repeat some of the tests that have been\n         * done above)\n         */\n\n        boolean drawTop = false;\n        boolean drawBottom = false;\n        boolean drawLeft = false;\n        boolean drawRight = false;\n\n        float topFadeStrength = 0.0f;\n        float bottomFadeStrength = 0.0f;\n        float leftFadeStrength = 0.0f;\n        float rightFadeStrength = 0.0f;\n\n        // Step 2, save the canvas' layers\n        int paddingLeft = mPaddingLeft;\n\n        final boolean offsetRequired = isPaddingOffsetRequired();\n        if (offsetRequired) {\n            paddingLeft += getLeftPaddingOffset();\n        }\n\n        int left = mScrollX + paddingLeft;\n        int right = left + mRight - mLeft - mPaddingRight - paddingLeft;\n        int top = mScrollY + getFadeTop(offsetRequired);\n        int bottom = top + getFadeHeight(offsetRequired);\n\n        if (offsetRequired) {\n            right += getRightPaddingOffset();\n            bottom += getBottomPaddingOffset();\n        }\n\n        final ScrollabilityCache scrollabilityCache = mScrollCache;\n        final float fadeHeight = scrollabilityCache.fadingEdgeLength;\n        int length = (int) fadeHeight;\n\n        // clip the fade length if top and bottom fades overlap\n        // overlapping fades produce odd-looking artifacts\n        if (verticalEdges && (top + length > bottom - length)) {\n            length = (bottom - top) / 2;\n        }\n\n        // also clip horizontal fades if necessary\n        if (horizontalEdges && (left + length > right - length)) {\n            length = (right - left) / 2;\n        }\n\n        if (verticalEdges) {\n            topFadeStrength = Math.max(0.0f, Math.min(1.0f, getTopFadingEdgeStrength()));\n            drawTop = topFadeStrength * fadeHeight > 1.0f;\n            bottomFadeStrength = Math.max(0.0f, Math.min(1.0f, getBottomFadingEdgeStrength()));\n            drawBottom = bottomFadeStrength * fadeHeight > 1.0f;\n        }\n\n        if (horizontalEdges) {\n            leftFadeStrength = Math.max(0.0f, Math.min(1.0f, getLeftFadingEdgeStrength()));\n            drawLeft = leftFadeStrength * fadeHeight > 1.0f;\n            rightFadeStrength = Math.max(0.0f, Math.min(1.0f, getRightFadingEdgeStrength()));\n            drawRight = rightFadeStrength * fadeHeight > 1.0f;\n        }\n\n        saveCount = canvas.getSaveCount();\n\n        int solidColor = getSolidColor();\n        if (solidColor == 0) {\n            final int flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;\n\n            if (drawTop) {\n                canvas.saveLayer(left, top, right, top + length, null, flags);\n            }\n\n            if (drawBottom) {\n                canvas.saveLayer(left, bottom - length, right, bottom, null, flags);\n            }\n\n            if (drawLeft) {\n                canvas.saveLayer(left, top, left + length, bottom, null, flags);\n            }\n\n            if (drawRight) {\n                canvas.saveLayer(right - length, top, right, bottom, null, flags);\n            }\n        } else {\n            scrollabilityCache.setFadeColor(solidColor);\n        }\n\n        // Step 3, draw the content\n        if (!dirtyOpaque) onDraw(canvas);\n\n        // Step 4, draw the children\n        dispatchDraw(canvas);\n\n        // Step 5, draw the fade effect and restore layers\n        final Paint p = scrollabilityCache.paint;\n        final Matrix matrix = scrollabilityCache.matrix;\n        final Shader fade = scrollabilityCache.shader;\n\n        if (drawTop) {\n            matrix.setScale(1, fadeHeight * topFadeStrength);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, top, right, top + length, p);\n        }\n\n        if (drawBottom) {\n            matrix.setScale(1, fadeHeight * bottomFadeStrength);\n            matrix.postRotate(180);\n            matrix.postTranslate(left, bottom);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, bottom - length, right, bottom, p);\n        }\n\n        if (drawLeft) {\n            matrix.setScale(1, fadeHeight * leftFadeStrength);\n            matrix.postRotate(-90);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, top, left + length, bottom, p);\n        }\n\n        if (drawRight) {\n            matrix.setScale(1, fadeHeight * rightFadeStrength);\n            matrix.postRotate(90);\n            matrix.postTranslate(right, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(right - length, top, right, bottom, p);\n        }\n\n        canvas.restoreToCount(saveCount);\n\n        drawAutofilledHighlight(canvas);\n\n        // Overlay is part of the content and draws beneath Foreground\n        if (mOverlay != null && !mOverlay.isEmpty()) {\n            mOverlay.getOverlayView().dispatchDraw(canvas);\n        }\n\n        // Step 6, draw decorations (foreground, scrollbars)\n        onDrawForeground(canvas);\n\n        if (debugDraw()) {\n            debugDrawFocus(canvas);\n        }\n    }\n\n```\n#### 1. 绘制背景 ####\n\n```java\n\n    /**\n     * /sdk/sources/android-26/android/view/View.java\n     * \n     * Draws the background onto the specified canvas.\n     * \n     * @param canvas Canvas on which to draw the background\n     */\n    private void drawBackground(Canvas canvas) {\n        final Drawable background = mBackground;\n        if (background == null) {\n            return;\n        }\n\n        setBackgroundBounds();\n\n        // Attempt to use a display list if requested.\n        if (canvas.isHardwareAccelerated() && mAttachInfo != null\n                && mAttachInfo.mThreadedRenderer != null) {\n            mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);\n\n            final RenderNode renderNode = mBackgroundRenderNode;\n            if (renderNode != null && renderNode.isValid()) {\n                setBackgroundRenderNodeProperties(renderNode);\n                ((DisplayListCanvas) canvas).drawRenderNode(renderNode);\n                return;\n            }\n        }\n\n        final int scrollX = mScrollX;\n        final int scrollY = mScrollY;\n        if ((scrollX | scrollY) == 0) {\n            background.draw(canvas);\n        } else {\n            canvas.translate(scrollX, scrollY);\n            background.draw(canvas);\n            canvas.translate(-scrollX, -scrollY);\n        }\n    }\n\n```\n\n#### 2. 保存画布用于⑤绘制渐变 ####\n\n```java\n\n\t\t// /sdk/sources/android-26/android/view/View.java\n\t\t.....\n\t\t// Step 2, save the canvas' layers\n        int paddingLeft = mPaddingLeft;\n\n        final boolean offsetRequired = isPaddingOffsetRequired();\n        if (offsetRequired) {\n            paddingLeft += getLeftPaddingOffset();\n        }\n\n        int left = mScrollX + paddingLeft;\n        int right = left + mRight - mLeft - mPaddingRight - paddingLeft;\n        int top = mScrollY + getFadeTop(offsetRequired);\n        int bottom = top + getFadeHeight(offsetRequired);\n\n        if (offsetRequired) {\n            right += getRightPaddingOffset();\n            bottom += getBottomPaddingOffset();\n        }\n\n        final ScrollabilityCache scrollabilityCache = mScrollCache;\n        final float fadeHeight = scrollabilityCache.fadingEdgeLength;\n        int length = (int) fadeHeight;\n\n        // clip the fade length if top and bottom fades overlap\n        // overlapping fades produce odd-looking artifacts\n        if (verticalEdges && (top + length > bottom - length)) {\n            length = (bottom - top) / 2;\n        }\n\n        // also clip horizontal fades if necessary\n        if (horizontalEdges && (left + length > right - length)) {\n            length = (right - left) / 2;\n        }\n\n        if (verticalEdges) {\n            topFadeStrength = Math.max(0.0f, Math.min(1.0f, getTopFadingEdgeStrength()));\n            drawTop = topFadeStrength * fadeHeight > 1.0f;\n            bottomFadeStrength = Math.max(0.0f, Math.min(1.0f, getBottomFadingEdgeStrength()));\n            drawBottom = bottomFadeStrength * fadeHeight > 1.0f;\n        }\n\n        if (horizontalEdges) {\n            leftFadeStrength = Math.max(0.0f, Math.min(1.0f, getLeftFadingEdgeStrength()));\n            drawLeft = leftFadeStrength * fadeHeight > 1.0f;\n            rightFadeStrength = Math.max(0.0f, Math.min(1.0f, getRightFadingEdgeStrength()));\n            drawRight = rightFadeStrength * fadeHeight > 1.0f;\n        }\n\n        saveCount = canvas.getSaveCount();\n\n        int solidColor = getSolidColor();\n        if (solidColor == 0) {\n            final int flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;\n\n            if (drawTop) {\n                canvas.saveLayer(left, top, right, top + length, null, flags);\n            }\n\n            if (drawBottom) {\n                canvas.saveLayer(left, bottom - length, right, bottom, null, flags);\n            }\n\n            if (drawLeft) {\n                canvas.saveLayer(left, top, left + length, bottom, null, flags);\n            }\n\n            if (drawRight) {\n                canvas.saveLayer(right - length, top, right, bottom, null, flags);\n            }\n        } else {\n            scrollabilityCache.setFadeColor(solidColor);\n        }\n\t\t.....\n\n```\n#### 3. 绘制内容 ####\n```java\n\n   /**\n\t * // /sdk/sources/android-26/android/view/View.java\n     * Implement this to do your drawing.\n     *\n     * @param canvas the canvas on which the background will be drawn\n     */\n    protected void onDraw(Canvas canvas) {\n    }\n\n```\n#### 4. 绘制子控件 ####\n步骤:\n1. 设置子控件的LayoutAnimation并设置动画监听;\n2. 判断`clipToPadding`,是否裁剪;\n3. 循环调用子控件绘制`drawChild(canvas, child, drawingTime)`,保存裁剪信息;\n4. 判断动画是否结束并回调动画结束函数;\n\n\n```java\n\n\t// /sdk/sources/android-26/android/view/ViewGroup.java\n    @Override\n    protected void dispatchDraw(Canvas canvas) {\n        boolean usingRenderNodeProperties = canvas.isRecordingFor(mRenderNode);\n        final int childrenCount = mChildrenCount;\n        final View[] children = mChildren;\n        int flags = mGroupFlags;\n\n        if ((flags & FLAG_RUN_ANIMATION) != 0 && canAnimate()) {\n            final boolean buildCache = !isHardwareAccelerated();\n            for (int i = 0; i < childrenCount; i++) {\n                final View child = children[i];\n                if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE) {\n                    final LayoutParams params = child.getLayoutParams();\n                    attachLayoutAnimationParameters(child, params, i, childrenCount);\n                    bindLayoutAnimation(child);\n                }\n            }\n\n            final LayoutAnimationController controller = mLayoutAnimationController;\n            if (controller.willOverlap()) {\n                mGroupFlags |= FLAG_OPTIMIZE_INVALIDATE;\n            }\n\n            controller.start();\n\n            mGroupFlags &= ~FLAG_RUN_ANIMATION;\n            mGroupFlags &= ~FLAG_ANIMATION_DONE;\n\n            if (mAnimationListener != null) {\n                mAnimationListener.onAnimationStart(controller.getAnimation());\n            }\n        }\n\n        int clipSaveCount = 0;\n        final boolean clipToPadding = (flags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK;\n        if (clipToPadding) {\n            clipSaveCount = canvas.save(Canvas.CLIP_SAVE_FLAG);\n            canvas.clipRect(mScrollX + mPaddingLeft, mScrollY + mPaddingTop,\n                    mScrollX + mRight - mLeft - mPaddingRight,\n                    mScrollY + mBottom - mTop - mPaddingBottom);\n        }\n\n        // We will draw our child's animation, let's reset the flag\n        mPrivateFlags &= ~PFLAG_DRAW_ANIMATION;\n        mGroupFlags &= ~FLAG_INVALIDATE_REQUIRED;\n\n        boolean more = false;\n        final long drawingTime = getDrawingTime();\n\n        if (usingRenderNodeProperties) canvas.insertReorderBarrier();\n        final int transientCount = mTransientIndices == null ? 0 : mTransientIndices.size();\n        int transientIndex = transientCount != 0 ? 0 : -1;\n        // Only use the preordered list if not HW accelerated, since the HW pipeline will do the\n        // draw reordering internally\n        final ArrayList<View> preorderedList = usingRenderNodeProperties\n                ? null : buildOrderedChildList();\n        final boolean customOrder = preorderedList == null\n                && isChildrenDrawingOrderEnabled();\n        for (int i = 0; i < childrenCount; i++) {\n            while (transientIndex >= 0 && mTransientIndices.get(transientIndex) == i) {\n                final View transientChild = mTransientViews.get(transientIndex);\n                if ((transientChild.mViewFlags & VISIBILITY_MASK) == VISIBLE ||\n                        transientChild.getAnimation() != null) {\n                    more |= drawChild(canvas, transientChild, drawingTime);\n                }\n                transientIndex++;\n                if (transientIndex >= transientCount) {\n                    transientIndex = -1;\n                }\n            }\n\n            final int childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);\n            final View child = getAndVerifyPreorderedView(preorderedList, children, childIndex);\n            if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) {\n                more |= drawChild(canvas, child, drawingTime);\n            }\n        }\n        while (transientIndex >= 0) {\n            // there may be additional transient views after the normal views\n            final View transientChild = mTransientViews.get(transientIndex);\n            if ((transientChild.mViewFlags & VISIBILITY_MASK) == VISIBLE ||\n                    transientChild.getAnimation() != null) {\n                more |= drawChild(canvas, transientChild, drawingTime);\n            }\n            transientIndex++;\n            if (transientIndex >= transientCount) {\n                break;\n            }\n        }\n        if (preorderedList != null) preorderedList.clear();\n\n        // Draw any disappearing views that have animations\n        if (mDisappearingChildren != null) {\n            final ArrayList<View> disappearingChildren = mDisappearingChildren;\n            final int disappearingCount = disappearingChildren.size() - 1;\n            // Go backwards -- we may delete as animations finish\n            for (int i = disappearingCount; i >= 0; i--) {\n                final View child = disappearingChildren.get(i);\n                more |= drawChild(canvas, child, drawingTime);\n            }\n        }\n        if (usingRenderNodeProperties) canvas.insertInorderBarrier();\n\n        if (debugDraw()) {\n            onDebugDraw(canvas);\n        }\n\n        if (clipToPadding) {\n            canvas.restoreToCount(clipSaveCount);\n        }\n\n        // mGroupFlags might have been updated by drawChild()\n        flags = mGroupFlags;\n\n        if ((flags & FLAG_INVALIDATE_REQUIRED) == FLAG_INVALIDATE_REQUIRED) {\n            invalidate(true);\n        }\n\n        if ((flags & FLAG_ANIMATION_DONE) == 0 && (flags & FLAG_NOTIFY_ANIMATION_LISTENER) == 0 &&\n                mLayoutAnimationController.isDone() && !more) {\n            // We want to erase the drawing cache and notify the listener after the\n            // next frame is drawn because one extra invalidate() is caused by\n            // drawChild() after the animation is over\n            mGroupFlags |= FLAG_NOTIFY_ANIMATION_LISTENER;\n            final Runnable end = new Runnable() {\n               @Override\n               public void run() {\n                   notifyAnimationListener();\n               }\n            };\n            post(end);\n        }\n    }\n\n    /**\n     * Draw {@link View#isAutofilled()} highlight over view if the view is autofilled.\n     *\n     * @param canvas The canvas to draw on\n     */\n    private void drawAutofilledHighlight(@NonNull Canvas canvas) {\n        if (isAutofilled()) {\n            Drawable autofilledHighlight = getAutofilledDrawable();\n\n            if (autofilledHighlight != null) {\n                autofilledHighlight.setBounds(0, 0, getWidth(), getHeight());\n                autofilledHighlight.draw(canvas);\n            }\n        }\n    }\n\n```\n#### 5. 绘制渐变 ####\n\n```java\n\n\t\t// /sdk/sources/android-26/android/view/View.java\n\t\t......\n        final Paint p = scrollabilityCache.paint;\n        final Matrix matrix = scrollabilityCache.matrix;\n        final Shader fade = scrollabilityCache.shader;\n\n        if (drawTop) {\n            matrix.setScale(1, fadeHeight * topFadeStrength);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, top, right, top + length, p);\n        }\n\n        if (drawBottom) {\n            matrix.setScale(1, fadeHeight * bottomFadeStrength);\n            matrix.postRotate(180);\n            matrix.postTranslate(left, bottom);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, bottom - length, right, bottom, p);\n        }\n\n        if (drawLeft) {\n            matrix.setScale(1, fadeHeight * leftFadeStrength);\n            matrix.postRotate(-90);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(left, top, left + length, bottom, p);\n        }\n\n        if (drawRight) {\n            matrix.setScale(1, fadeHeight * rightFadeStrength);\n            matrix.postRotate(90);\n            matrix.postTranslate(right, top);\n            fade.setLocalMatrix(matrix);\n            p.setShader(fade);\n            canvas.drawRect(right - length, top, right, bottom, p);\n        }\n\n        canvas.restoreToCount(saveCount);\n\n        drawAutofilledHighlight(canvas);\n\n        // Overlay is part of the content and draws beneath Foreground\n        if (mOverlay != null && !mOverlay.isEmpty()) {\n            mOverlay.getOverlayView().dispatchDraw(canvas);\n        }\n\n\t\t......\n\n```\n#### 6. 绘制装饰附加内容 ####\n```java\n\n    /**\n\t * // /sdk/sources/android-26/android/view/View.java\n     * Draw any foreground content for this view.\n     *\n     * <p>Foreground content may consist of scroll bars, a {@link #setForeground foreground}\n     * drawable or other view-specific decorations. The foreground is drawn on top of the\n     * primary view content.</p>\n     *\n     * @param canvas canvas to draw into\n     */\n    public void onDrawForeground(Canvas canvas) {\n        onDrawScrollIndicators(canvas);\n        onDrawScrollBars(canvas);\n\n        final Drawable foreground = mForegroundInfo != null ? mForegroundInfo.mDrawable : null;\n        if (foreground != null) {\n            if (mForegroundInfo.mBoundsChanged) {\n                mForegroundInfo.mBoundsChanged = false;\n                final Rect selfBounds = mForegroundInfo.mSelfBounds;\n                final Rect overlayBounds = mForegroundInfo.mOverlayBounds;\n\n                if (mForegroundInfo.mInsidePadding) {\n                    selfBounds.set(0, 0, getWidth(), getHeight());\n                } else {\n                    selfBounds.set(getPaddingLeft(), getPaddingTop(),\n                            getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());\n                }\n\n                final int ld = getLayoutDirection();\n                Gravity.apply(mForegroundInfo.mGravity, foreground.getIntrinsicWidth(),\n                        foreground.getIntrinsicHeight(), selfBounds, overlayBounds, ld);\n                foreground.setBounds(overlayBounds);\n            }\n\n            foreground.draw(canvas);\n        }\n    }\n\n```\n\n\n---","slug":"Android之自定义控件——View测量,布局,绘制","published":1,"date":"2018-03-21T08:06:46.914Z","updated":"2018-03-21T08:10:46.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf0v9p0a0001m84ldumn2u6f","content":"<h1 id=\"控件的测量-布局-绘制过程\"><a href=\"#控件的测量-布局-绘制过程\" class=\"headerlink\" title=\"控件的测量,布局,绘制过程\"></a>控件的测量,布局,绘制过程</h1><pre><code>目录:\n    - 测量\n        1. 测量之MeasureSpec与LayoutParams\n        2. View # onMeasure(int,int)\n        3. ViewGroup # measureChildren()\n        4. 测量某个View的宽高的方式\n    - 布局\n        1. View # layout(int,int,int,int)\n        2. View # onLayout()\n            1. LinearLayout\n            2. RelativeLayout\n            3. FrameLayout\n    - 绘制\n        View # draw(Canvas)\n            1. Draw the background    绘制背景\n            2. If necessary, save the canvas&apos; layers to prepare for fading\n            3. Draw view&apos;s content    绘制内容\n            4. Draw children        绘制子控件\n            5. If necessary, draw the fading edges and restore layers\n            6. Draw decorations (scrollbars for instance) 绘制附加内容\n\n参考自:\n        1. 《 Android 开发艺术探索 》 : Page 174\n        2. Android开发之自定义控件(二)---onLayout详解 : http://blog.csdn.net/dmk877/article/details/49632959\n</code></pre><a id=\"more\"></a>\n<hr>\n<h3 id=\"测量\"><a href=\"#测量\" class=\"headerlink\" title=\"测量\"></a>测量</h3><h4 id=\"1-测量之MeasureSpec与LayoutParams\"><a href=\"#1-测量之MeasureSpec与LayoutParams\" class=\"headerlink\" title=\"1. 测量之MeasureSpec与LayoutParams\"></a>1. 测量之<code>MeasureSpec</code>与<code>LayoutParams</code></h4><p><a href=\"https://github.com/SchafferWang0818/SchafferBaseLibrary/blob/master/notes/Android%E4%B9%8B%E6%98%BE%E7%A4%BA%E2%80%94%E2%80%94WindowManager.md#windowmanagerlayoutparams\" target=\"_blank\" rel=\"noopener\"><strong><code>WindowManager$LayoutParams</code> 友情链接 点击此处</strong> </a></p>\n<blockquote>\n<p>《 Android 开发艺术探索 》<br>对于 <code>DecorView</code> ，其 <code>MeasureSpec</code> 由窗口的尺寸和其自身的 <code>LayoutParams</code> 来共同决定;<br>对于普通 <code>View</code>，其 <code>MeasureSpec</code> 由<font color=\"red\"> <strong>父容器</strong> </font>的<code>MeasureSpec</code>和自身的 <code>LayoutParams</code> 来共同决定。</p>\n<font color=\"red\"> <strong><code>parentSize</code>指父容器当前剩余的空间大小。</strong></font>\n\n</blockquote>\n<p><img src=\"https://i.imgur.com/vfDqiS1.png\" alt=\"MeasureSpec\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ViewGroup.java</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class=\"line\">               mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, </span><br><span class=\"line\">\t\t\tlp.width);</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class=\"line\">               mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed, </span><br><span class=\"line\">\t\t\tlp.height);</span><br><span class=\"line\"></span><br><span class=\"line\">       child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class=\"line\">       <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// Parent has imposed an exact size on us</span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               resultSize = childDimension;</span><br><span class=\"line\">               resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to be our size. So be it.</span></span><br><span class=\"line\">               resultSize = size;</span><br><span class=\"line\">               resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to determine its own size. It can't be</span></span><br><span class=\"line\">               <span class=\"comment\">// bigger than us.</span></span><br><span class=\"line\">               resultSize = size;</span><br><span class=\"line\">               resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Parent has imposed a maximum size on us</span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants a specific size... so be it</span></span><br><span class=\"line\">               resultSize = childDimension;</span><br><span class=\"line\">               resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></span><br><span class=\"line\">               <span class=\"comment\">// Constrain child to not be bigger than us.</span></span><br><span class=\"line\">               resultSize = size;</span><br><span class=\"line\">               resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to determine its own size. It can't be</span></span><br><span class=\"line\">               <span class=\"comment\">// bigger than us.</span></span><br><span class=\"line\">               resultSize = size;</span><br><span class=\"line\">               resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Parent asked to see how big we want to be</span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants a specific size... let him have it</span></span><br><span class=\"line\">               resultSize = childDimension;</span><br><span class=\"line\">               resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to be our size... find out how big it should</span></span><br><span class=\"line\">               <span class=\"comment\">// be</span></span><br><span class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</span><br><span class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to determine its own size.... find out how</span></span><br><span class=\"line\">               <span class=\"comment\">// big it should be</span></span><br><span class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</span><br><span class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//noinspection ResourceType</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"2-View-onMeasure-int-int\"><a href=\"#2-View-onMeasure-int-int\" class=\"headerlink\" title=\"2. View # onMeasure(int,int)\"></a>2. <code>View # onMeasure(int,int)</code></h4><blockquote>\n<ol>\n<li><code>MeasureSpec.getSize(measureSpec)</code> 就是<code>View</code>测量后的大小,在<code>layout()</code>阶段确定; </li>\n<li><code>getSuggestedMinimumWidth/Height()</code>设置默认大小:<ul>\n<li>当未设置背景时,由<code>android:minWidth/minHeight</code>决定;</li>\n<li>当已设置背景时,由背景Drawable原始大小最小值与<code>android:minWidth/minHeight</code>决定; </li>\n</ul>\n</li>\n<li><font color=\"red\"><strong>依照上表, 当自定义<code>View</code> 直接继承自<code>View</code>重写<code>onMeasure()</code>并设置<code>wrap_content</code>时,相当于直接填充了父容器剩余所有空间<code>match_parent</code>。可以通过<code>onMeasure()</code>设置宽高默认值解决</strong></font>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( widthMode==MeasureSpec.AT_MOST </span><br><span class=\"line\">\t\t\t\t&amp;&amp; heightMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">\t\t\tsetMeasureDimension(mWidth , mHeight);  </span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(widthMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">\t\t\tsetMeasureDimension(mWidth , heightSize);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(heightMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">\t\t\tsetMeasureDimension(widthSize , mHeight);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;\t  </span><br><span class=\"line\"></span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.</span></span><br><span class=\"line\"><span class=\"comment\">     *                         The requirements are encoded with</span></span><br><span class=\"line\"><span class=\"comment\">     *                         &#123;@link android.view.View.MeasureSpec&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * @param heightMeasureSpec vertical space requirements as imposed by the parent.</span></span><br><span class=\"line\"><span class=\"comment\">     *                         The requirements are encoded with</span></span><br><span class=\"line\"><span class=\"comment\">     *                         &#123;@link android.view.View.MeasureSpec&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @see #getMeasuredWidth()</span></span><br><span class=\"line\"><span class=\"comment\">     * @see #getMeasuredHeight()</span></span><br><span class=\"line\"><span class=\"comment\">     * @see #setMeasuredDimension(int, int)</span></span><br><span class=\"line\"><span class=\"comment\">     * @see #getSuggestedMinimumHeight()</span></span><br><span class=\"line\"><span class=\"comment\">     * @see #getSuggestedMinimumWidth()</span></span><br><span class=\"line\"><span class=\"comment\">     * @see android.view.View.MeasureSpec#getMode(int)</span></span><br><span class=\"line\"><span class=\"comment\">     * @see android.view.View.MeasureSpec#getSize(int)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置宽高的测量值</span></span><br><span class=\"line\">        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),</span><br><span class=\"line\">                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 设置默认值</span></span><br><span class=\"line\"><span class=\"comment\">     * Utility to return a default size. Uses the supplied size if the</span></span><br><span class=\"line\"><span class=\"comment\">     * MeasureSpec imposed no constraints. Will get larger if allowed</span></span><br><span class=\"line\"><span class=\"comment\">     * by the MeasureSpec.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size Default size for this view</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> measureSpec Constraints imposed by the parent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The size this view should be.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = size;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            result = size;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">            result = specSize;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"3-ViewGroup-measureChildren\"><a href=\"#3-ViewGroup-measureChildren\" class=\"headerlink\" title=\"3. ViewGroup # measureChildren()\"></a>3. <code>ViewGroup # measureChildren()</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* ViewGroup.java </span></span><br><span class=\"line\"><span class=\"comment\">* 循环创建子元素的测量算子和子元素的LayoutParams通过子元素的measure()进行测量;</span></span><br><span class=\"line\"><span class=\"comment\">   * Ask all of the children of this view to measure themselves, taking into</span></span><br><span class=\"line\"><span class=\"comment\">   * account both the MeasureSpec requirements for this view and its padding.</span></span><br><span class=\"line\"><span class=\"comment\">   * We skip children that are in the GONE state The heavy lifting is done in</span></span><br><span class=\"line\"><span class=\"comment\">   * getChildMeasureSpec.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> widthMeasureSpec The width requirements for this view</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> heightMeasureSpec The height requirements for this view</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = mChildrenCount;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</span><br><span class=\"line\">              measureChild(child, widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"4-测量某个View的宽高的方式\"><a href=\"#4-测量某个View的宽高的方式\" class=\"headerlink\" title=\"4. 测量某个View的宽高的方式\"></a>4. 测量某个View的宽高的方式</h4><ol>\n<li><p><code>Activity/View # onWindowFocusChanged(boolean)</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> hasWindowFocus)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onWindowFocusChanged(hasWindowFocus);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasWindowFocus) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//measureLines();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>View # post(Runnable)</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">view.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        view.getWidth(); <span class=\"comment\">// 获取宽度</span></span><br><span class=\"line\">        view.getHeight(); <span class=\"comment\">// 获取高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ViewTreeObserver</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.getViewTreeObserver().addOnGlobalLayoutListener(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">            view.getViewTreeObserver()</span><br><span class=\"line\">                    .removeOnGlobalLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            view.getViewTreeObserver()</span><br><span class=\"line\">                    .removeGlobalOnLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        view.getWidth(); <span class=\"comment\">// 获取宽度</span></span><br><span class=\"line\">        view.getHeight(); <span class=\"comment\">// 获取高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>View # measure(int,int)</code></p>\n<ul>\n<li><p>设置固定数值</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> width = View.MeasureSpec.makeMeasureSpec(<span class=\"number\">100</span>,</span><br><span class=\"line\">      \t\tView.MeasureSpec.EXACTLY);</span><br><span class=\"line\"><span class=\"keyword\">int</span> height = View.MeasureSpec.makeMeasureSpec(<span class=\"number\">100</span>,</span><br><span class=\"line\">        View.MeasureSpec.EXACTLY);</span><br><span class=\"line\">view.measure(width, height);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>wrap_content</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> width = View.MeasureSpec.makeMeasureSpec((<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">30</span>)-<span class=\"number\">1</span>,</span><br><span class=\"line\">      \t\tView.MeasureSpec.AT_MOST);</span><br><span class=\"line\"><span class=\"keyword\">int</span> height = View.MeasureSpec.makeMeasureSpec((<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">30</span>)-<span class=\"number\">1</span>,</span><br><span class=\"line\">        View.MeasureSpec.AT_MOST);</span><br><span class=\"line\">view.measure(width, height);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"布局Layout\"><a href=\"#布局Layout\" class=\"headerlink\" title=\"布局Layout\"></a>布局<code>Layout</code></h3><blockquote>\n<p>《 Android 开发艺术探索 》: <font color=\"orange\"><strong><code>ViewGroup</code>用来确定子元素的位置, <code>layout()</code>确定的是<code>ViewGroup</code>本身的位置,而<code>onLayout()</code>确定的是所有子控件的位置;.</strong></font><br>onLayout详解 : <font color=\"orange\"><strong>自定义控件的第二步<code>onLayout</code>即确定控件的位置</strong></font></p>\n</blockquote>\n<h4 id=\"1-layout-int-int-int-int\"><a href=\"#1-layout-int-int-int-int\" class=\"headerlink\" title=\"1. layout(int,int,int,int)\"></a>1. <code>layout(int,int,int,int)</code></h4><p>主要有以下步骤:</p>\n<ol>\n<li><font color=\"red\"><strong><code>View # setFrame(l, t, r, b)</code>初始化mLeft、mRight、mTop、mBottom，设置当前<code>View/ViewGroup</code>的四个顶点的位置;</strong></font></li>\n<li><font color=\"green\"><strong><code>View # onLayout(changed, l, t, r, b)</code>确定子控件位置;</strong></font></li>\n<li><font color=\"blue\"><strong>判断<code>viewGroup.mOnLayoutChangeListeners</code>的存在,并调用<code>View $ OnLayoutChangeListener # onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB)</code>; </strong></font>\n\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * android-26/android.view.ViewGroup.java</span></span><br><span class=\"line\"><span class=\"comment\">    * ViewGroup # layout(int l, int t, int r, int b)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!mSuppressLayout &amp;&amp; (mTransition == <span class=\"keyword\">null</span> || !mTransition.isChangingLayout())) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (mTransition != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               mTransition.layoutChange(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>.layout(l, t, r, b);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">// record the fact that we noop'd it; request layout when transition finishes</span></span><br><span class=\"line\">           mLayoutCalledWhileSuppressed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * android-26/android.view.View.java</span></span><br><span class=\"line\"><span class=\"comment\">    * View # layout(int l, int t, int r, int b)</span></span><br><span class=\"line\"><span class=\"comment\">    * </span></span><br><span class=\"line\"><span class=\"comment\">    * Assign a size and position to a view and all of its</span></span><br><span class=\"line\"><span class=\"comment\">    * descendants</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;p&gt;This is the second phase of the layout mechanism.</span></span><br><span class=\"line\"><span class=\"comment\">    * (The first is measuring). In this phase, each parent calls</span></span><br><span class=\"line\"><span class=\"comment\">    * layout on all of its children to position them.</span></span><br><span class=\"line\"><span class=\"comment\">    * This is typically done using the child measurements</span></span><br><span class=\"line\"><span class=\"comment\">    * that were stored in the measure pass().&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;p&gt;Derived classes should not override this method.</span></span><br><span class=\"line\"><span class=\"comment\">    * Derived classes with children should override</span></span><br><span class=\"line\"><span class=\"comment\">    * onLayout. In that method, they should</span></span><br><span class=\"line\"><span class=\"comment\">    * call layout on each of their children.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> l Left position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> t Top position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> r Right position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> b Bottom position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</span><br><span class=\"line\">           mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> oldL = mLeft;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> oldT = mTop;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> oldB = mBottom;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> oldR = mRight;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</span><br><span class=\"line\">               setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class=\"line\">           onLayout(changed, l, t, r, b);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (shouldDrawRoundScrollbar()) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(mRoundScrollbarRenderer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   mRoundScrollbarRenderer = <span class=\"keyword\">new</span> RoundScrollbarRenderer(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               mRoundScrollbarRenderer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</span><br><span class=\"line\"></span><br><span class=\"line\">           ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</span><br><span class=\"line\">                       (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</span><br><span class=\"line\">               <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class=\"line\">                   listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</span><br><span class=\"line\">       mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           mPrivateFlags3 &amp;= ~PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT;</span><br><span class=\"line\">           notifyEnterOrExitForAutoFillIfNeeded(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"2-View-onLayout\"><a href=\"#2-View-onLayout\" class=\"headerlink\" title=\"2. View # onLayout()\"></a>2. <code>View # onLayout()</code></h4><p>以 LinearLayout、RelativeLayout、FrameLayout 为例,代码如下.</p>\n<h5 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout\"></a><code>LinearLayout</code></h5><p>以竖直方向为例,由于 <code>LinearLayout</code>特性,当设置竖直方向时,循环得到子控件的<code>mTop(childTop,包含marginTop)</code>, <strong>根据模拟测量宽高</strong>调用<code>setChildFrame(...)</code>间接调用<code>child.layout(...)</code>为子控件指定对应的位置; 然后继续叠加<code>mTop</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">        layoutVertical(l, t, r, b);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        layoutHorizontal(l, t, r, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 以竖直方向为例</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * Position the children during a layout pass if the orientation of this</span></span><br><span class=\"line\"><span class=\"comment\"> * LinearLayout is set to &#123;<span class=\"doctag\">@link</span> #VERTICAL&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getOrientation()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #setOrientation(int)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #onLayout(boolean, int, int, int, int)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> top</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bottom</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> childTop;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> childLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Where right end of child should go</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = right - left;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> childRight = width - mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Space available for child</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> childSpace = width - paddingLeft - mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (majorGravity) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> Gravity.BOTTOM:</span><br><span class=\"line\">           <span class=\"comment\">// mTotalLength contains the padding already</span></span><br><span class=\"line\">&gt;&gt;&gt;&gt;       childTop = mPaddingTop + bottom - top - mTotalLength;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// mTotalLength contains the padding already</span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</span><br><span class=\"line\">&gt;&gt;&gt;&gt;       childTop = mPaddingTop + (bottom - top - mTotalLength) / <span class=\"number\">2</span>;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">case</span> Gravity.TOP:</span><br><span class=\"line\">       <span class=\"keyword\">default</span>:</span><br><span class=\"line\">           childTop = mPaddingTop;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            childTop += measureNullChild(i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</span><br><span class=\"line\">                    (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> gravity = lp.gravity;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (gravity &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                gravity = minorGravity;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</span><br><span class=\"line\">                    childLeft = paddingLeft + ((childSpace - childWidth) / <span class=\"number\">2</span>)</span><br><span class=\"line\">                            + lp.leftMargin - lp.rightMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.RIGHT:</span><br><span class=\"line\">                    childLeft = childRight - childWidth - lp.rightMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.LEFT:</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    childLeft = paddingLeft + lp.leftMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</span><br><span class=\"line\">                childTop += mDividerHeight;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            childTop += lp.topMargin;</span><br><span class=\"line\">            setChildFrame(child, childLeft, childTop + getLocationOffset(child),</span><br><span class=\"line\">                    childWidth, childHeight);</span><br><span class=\"line\">            childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</span><br><span class=\"line\"></span><br><span class=\"line\">            i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"RelativeLayout\"><a href=\"#RelativeLayout\" class=\"headerlink\" title=\"RelativeLayout\"></a><code>RelativeLayout</code></h5><p>看似很简单的操作.更多的操作已经在初始化或在<code>onMeasure()</code>中已经完成,例如<font color=\"blue\"><strong>在<code>onMeasure()</code>中子控件之间的”<code>toLeftOf</code>“等相关view,已经存储入对应数组,并在循环中调用 <code>applyHorizontalSizeRules(params, myWidth, rules)</code> 对子控件位置信息进行设置</strong></font>;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//  The layout has actually already been performed and the positions</span></span><br><span class=\"line\">       <span class=\"comment\">//  cached.  Apply the cached values to the children.</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">           View child = getChildAt(i);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">               RelativeLayout.LayoutParams st =</span><br><span class=\"line\">                       (RelativeLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">               child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"FrameLayout\"><a href=\"#FrameLayout\" class=\"headerlink\" title=\"FrameLayout\"></a><code>FrameLayout</code></h5><font color=\"blue\"><strong>与<code>RelativeLayout</code>相比,多了权重的判断,少了关系判断</strong>.</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">    layoutChildren(left, top, right, bottom, <span class=\"keyword\">false</span> <span class=\"comment\">/* no force left gravity */</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom, <span class=\"keyword\">boolean</span> forceLeftGravity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentLeft = getPaddingLeftWithForeground();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentRight = right - left - getPaddingRightWithForeground();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentTop = getPaddingTopWithForeground();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentBottom = bottom - top - getPaddingBottomWithForeground();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getChildAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = child.getMeasuredWidth();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = child.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> childLeft;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> childTop;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> gravity = lp.gravity;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (gravity == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                gravity = DEFAULT_CHILD_GRAVITY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> verticalGravity = gravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</span><br><span class=\"line\">                    childLeft = parentLeft + (parentRight - parentLeft - width) / <span class=\"number\">2</span> +</span><br><span class=\"line\">                    lp.leftMargin - lp.rightMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.RIGHT:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!forceLeftGravity) &#123;</span><br><span class=\"line\">                        childLeft = parentRight - width - lp.rightMargin;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.LEFT:</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    childLeft = parentLeft + lp.leftMargin;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (verticalGravity) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.TOP:</span><br><span class=\"line\">                    childTop = parentTop + lp.topMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</span><br><span class=\"line\">                    childTop = parentTop + (parentBottom - parentTop - height) / <span class=\"number\">2</span> +</span><br><span class=\"line\">                    lp.topMargin - lp.bottomMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.BOTTOM:</span><br><span class=\"line\">                    childTop = parentBottom - height - lp.bottomMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    childTop = parentTop + lp.topMargin;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            child.layout(childLeft, childTop, childLeft + width, childTop + height);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Draw\"><a href=\"#Draw\" class=\"headerlink\" title=\"Draw\"></a>Draw</h3><p>绘制操作代码如下.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Manually render this view (and all of its children) to the given Canvas.</span></span><br><span class=\"line\"><span class=\"comment\">    * The view must have already done a full layout before this function is</span></span><br><span class=\"line\"><span class=\"comment\">    * called.  When implementing a view, implement</span></span><br><span class=\"line\"><span class=\"comment\">    * &#123;<span class=\"doctag\">@link</span> #onDraw(android.graphics.Canvas)&#125; instead of overriding this method.</span></span><br><span class=\"line\"><span class=\"comment\">    * If you do need to override this method, call the superclass version.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> canvas The Canvas to which the View is rendered.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@CallSuper</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> privateFlags = mPrivateFlags;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;</span><br><span class=\"line\">               (mAttachInfo == <span class=\"keyword\">null</span> || !mAttachInfo.mIgnoreDirtyState);</span><br><span class=\"line\">       mPrivateFlags = (privateFlags &amp; ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Draw traversal performs several drawing steps which must be executed</span></span><br><span class=\"line\"><span class=\"comment\">        * in the appropriate order:</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        *      1. Draw the background\t绘制背景</span></span><br><span class=\"line\"><span class=\"comment\">        *      2. If necessary, save the canvas' layers to prepare for fading</span></span><br><span class=\"line\"><span class=\"comment\">        *      3. Draw view's content\t绘制内容</span></span><br><span class=\"line\"><span class=\"comment\">        *      4. Draw children\t\t绘制子控件</span></span><br><span class=\"line\"><span class=\"comment\">        *      5. If necessary, draw the fading edges and restore layers</span></span><br><span class=\"line\"><span class=\"comment\">        *      6. Draw decorations (scrollbars for instance) 绘制附加内容</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 1, draw the background, if needed</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> saveCount;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</span><br><span class=\"line\">           drawBackground(canvas);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// skip step 2 &amp; 5 if possible (common case)</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewFlags = mViewFlags;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!verticalEdges &amp;&amp; !horizontalEdges) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// Step 3, draw the content</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Step 4, draw the children</span></span><br><span class=\"line\">           dispatchDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">           drawAutofilledHighlight(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Overlay is part of the content and draws beneath Foreground</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (mOverlay != <span class=\"keyword\">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class=\"line\">               mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Step 6, draw decorations (foreground, scrollbars)</span></span><br><span class=\"line\">           onDrawForeground(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Step 7, draw the default focus highlight</span></span><br><span class=\"line\">           drawDefaultFocusHighlight(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (debugDraw()) &#123;</span><br><span class=\"line\">               debugDrawFocus(canvas);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// we're done...</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Here we do the full fledged routine...</span></span><br><span class=\"line\"><span class=\"comment\">        * (this is an uncommon case where speed matters less,</span></span><br><span class=\"line\"><span class=\"comment\">        * this is why we repeat some of the tests that have been</span></span><br><span class=\"line\"><span class=\"comment\">        * done above)</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> drawTop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> drawBottom = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> drawLeft = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> drawRight = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">float</span> topFadeStrength = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">       <span class=\"keyword\">float</span> bottomFadeStrength = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">       <span class=\"keyword\">float</span> leftFadeStrength = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">       <span class=\"keyword\">float</span> rightFadeStrength = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 2, save the canvas' layers</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> offsetRequired = isPaddingOffsetRequired();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (offsetRequired) &#123;</span><br><span class=\"line\">           paddingLeft += getLeftPaddingOffset();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> left = mScrollX + paddingLeft;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> right = left + mRight - mLeft - mPaddingRight - paddingLeft;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> top = mScrollY + getFadeTop(offsetRequired);</span><br><span class=\"line\">       <span class=\"keyword\">int</span> bottom = top + getFadeHeight(offsetRequired);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (offsetRequired) &#123;</span><br><span class=\"line\">           right += getRightPaddingOffset();</span><br><span class=\"line\">           bottom += getBottomPaddingOffset();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">final</span> ScrollabilityCache scrollabilityCache = mScrollCache;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> fadeHeight = scrollabilityCache.fadingEdgeLength;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> length = (<span class=\"keyword\">int</span>) fadeHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// clip the fade length if top and bottom fades overlap</span></span><br><span class=\"line\">       <span class=\"comment\">// overlapping fades produce odd-looking artifacts</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (verticalEdges &amp;&amp; (top + length &gt; bottom - length)) &#123;</span><br><span class=\"line\">           length = (bottom - top) / <span class=\"number\">2</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// also clip horizontal fades if necessary</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (horizontalEdges &amp;&amp; (left + length &gt; right - length)) &#123;</span><br><span class=\"line\">           length = (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (verticalEdges) &#123;</span><br><span class=\"line\">           topFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getTopFadingEdgeStrength()));</span><br><span class=\"line\">           drawTop = topFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">           bottomFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getBottomFadingEdgeStrength()));</span><br><span class=\"line\">           drawBottom = bottomFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (horizontalEdges) &#123;</span><br><span class=\"line\">           leftFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getLeftFadingEdgeStrength()));</span><br><span class=\"line\">           drawLeft = leftFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">           rightFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getRightFadingEdgeStrength()));</span><br><span class=\"line\">           drawRight = rightFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       saveCount = canvas.getSaveCount();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> solidColor = getSolidColor();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (solidColor == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">               canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (drawBottom) &#123;</span><br><span class=\"line\">               canvas.saveLayer(left, bottom - length, right, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (drawLeft) &#123;</span><br><span class=\"line\">               canvas.saveLayer(left, top, left + length, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (drawRight) &#123;</span><br><span class=\"line\">               canvas.saveLayer(right - length, top, right, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           scrollabilityCache.setFadeColor(solidColor);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 3, draw the content</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 4, draw the children</span></span><br><span class=\"line\">       dispatchDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> Paint p = scrollabilityCache.paint;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> Matrix matrix = scrollabilityCache.matrix;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> Shader fade = scrollabilityCache.shader;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">           matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</span><br><span class=\"line\">           matrix.postTranslate(left, top);</span><br><span class=\"line\">           fade.setLocalMatrix(matrix);</span><br><span class=\"line\">           p.setShader(fade);</span><br><span class=\"line\">           canvas.drawRect(left, top, right, top + length, p);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (drawBottom) &#123;</span><br><span class=\"line\">           matrix.setScale(<span class=\"number\">1</span>, fadeHeight * bottomFadeStrength);</span><br><span class=\"line\">           matrix.postRotate(<span class=\"number\">180</span>);</span><br><span class=\"line\">           matrix.postTranslate(left, bottom);</span><br><span class=\"line\">           fade.setLocalMatrix(matrix);</span><br><span class=\"line\">           p.setShader(fade);</span><br><span class=\"line\">           canvas.drawRect(left, bottom - length, right, bottom, p);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (drawLeft) &#123;</span><br><span class=\"line\">           matrix.setScale(<span class=\"number\">1</span>, fadeHeight * leftFadeStrength);</span><br><span class=\"line\">           matrix.postRotate(-<span class=\"number\">90</span>);</span><br><span class=\"line\">           matrix.postTranslate(left, top);</span><br><span class=\"line\">           fade.setLocalMatrix(matrix);</span><br><span class=\"line\">           p.setShader(fade);</span><br><span class=\"line\">           canvas.drawRect(left, top, left + length, bottom, p);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (drawRight) &#123;</span><br><span class=\"line\">           matrix.setScale(<span class=\"number\">1</span>, fadeHeight * rightFadeStrength);</span><br><span class=\"line\">           matrix.postRotate(<span class=\"number\">90</span>);</span><br><span class=\"line\">           matrix.postTranslate(right, top);</span><br><span class=\"line\">           fade.setLocalMatrix(matrix);</span><br><span class=\"line\">           p.setShader(fade);</span><br><span class=\"line\">           canvas.drawRect(right - length, top, right, bottom, p);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       canvas.restoreToCount(saveCount);</span><br><span class=\"line\"></span><br><span class=\"line\">       drawAutofilledHighlight(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Overlay is part of the content and draws beneath Foreground</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (mOverlay != <span class=\"keyword\">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class=\"line\">           mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 6, draw decorations (foreground, scrollbars)</span></span><br><span class=\"line\">       onDrawForeground(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (debugDraw()) &#123;</span><br><span class=\"line\">           debugDrawFocus(canvas);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-绘制背景\"><a href=\"#1-绘制背景\" class=\"headerlink\" title=\"1. 绘制背景\"></a>1. 绘制背景</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * /sdk/sources/android-26/android/view/View.java</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * Draws the background onto the specified canvas.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> canvas Canvas on which to draw the background</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBackground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Drawable background = mBackground;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (background == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setBackgroundBounds();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Attempt to use a display list if requested.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (canvas.isHardwareAccelerated() &amp;&amp; mAttachInfo != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; mAttachInfo.mThreadedRenderer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> RenderNode renderNode = mBackgroundRenderNode;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (renderNode != <span class=\"keyword\">null</span> &amp;&amp; renderNode.isValid()) &#123;</span><br><span class=\"line\">            setBackgroundRenderNodeProperties(renderNode);</span><br><span class=\"line\">            ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollX = mScrollX;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollY = mScrollY;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((scrollX | scrollY) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        background.draw(canvas);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        canvas.translate(scrollX, scrollY);</span><br><span class=\"line\">        background.draw(canvas);</span><br><span class=\"line\">        canvas.translate(-scrollX, -scrollY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-保存画布用于⑤绘制渐变\"><a href=\"#2-保存画布用于⑤绘制渐变\" class=\"headerlink\" title=\"2. 保存画布用于⑤绘制渐变\"></a>2. 保存画布用于⑤绘制渐变</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /sdk/sources/android-26/android/view/View.java</span></span><br><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"comment\">// Step 2, save the canvas' layers</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> offsetRequired = isPaddingOffsetRequired();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offsetRequired) &#123;</span><br><span class=\"line\">          paddingLeft += getLeftPaddingOffset();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> left = mScrollX + paddingLeft;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> right = left + mRight - mLeft - mPaddingRight - paddingLeft;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> top = mScrollY + getFadeTop(offsetRequired);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> bottom = top + getFadeHeight(offsetRequired);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offsetRequired) &#123;</span><br><span class=\"line\">          right += getRightPaddingOffset();</span><br><span class=\"line\">          bottom += getBottomPaddingOffset();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">final</span> ScrollabilityCache scrollabilityCache = mScrollCache;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> fadeHeight = scrollabilityCache.fadingEdgeLength;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> length = (<span class=\"keyword\">int</span>) fadeHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// clip the fade length if top and bottom fades overlap</span></span><br><span class=\"line\">      <span class=\"comment\">// overlapping fades produce odd-looking artifacts</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (verticalEdges &amp;&amp; (top + length &gt; bottom - length)) &#123;</span><br><span class=\"line\">          length = (bottom - top) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// also clip horizontal fades if necessary</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (horizontalEdges &amp;&amp; (left + length &gt; right - length)) &#123;</span><br><span class=\"line\">          length = (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (verticalEdges) &#123;</span><br><span class=\"line\">          topFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getTopFadingEdgeStrength()));</span><br><span class=\"line\">          drawTop = topFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">          bottomFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getBottomFadingEdgeStrength()));</span><br><span class=\"line\">          drawBottom = bottomFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (horizontalEdges) &#123;</span><br><span class=\"line\">          leftFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getLeftFadingEdgeStrength()));</span><br><span class=\"line\">          drawLeft = leftFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">          rightFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getRightFadingEdgeStrength()));</span><br><span class=\"line\">          drawRight = rightFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      saveCount = canvas.getSaveCount();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> solidColor = getSolidColor();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (solidColor == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">              canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (drawBottom) &#123;</span><br><span class=\"line\">              canvas.saveLayer(left, bottom - length, right, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (drawLeft) &#123;</span><br><span class=\"line\">              canvas.saveLayer(left, top, left + length, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (drawRight) &#123;</span><br><span class=\"line\">              canvas.saveLayer(right - length, top, right, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          scrollabilityCache.setFadeColor(solidColor);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-绘制内容\"><a href=\"#3-绘制内容\" class=\"headerlink\" title=\"3. 绘制内容\"></a>3. 绘制内容</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* // /sdk/sources/android-26/android/view/View.java</span></span><br><span class=\"line\"><span class=\"comment\">   * Implement this to do your drawing.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> canvas the canvas on which the background will be drawn</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-绘制子控件\"><a href=\"#4-绘制子控件\" class=\"headerlink\" title=\"4. 绘制子控件\"></a>4. 绘制子控件</h4><p>步骤:</p>\n<ol>\n<li>设置子控件的LayoutAnimation并设置动画监听;</li>\n<li>判断<code>clipToPadding</code>,是否裁剪;</li>\n<li>循环调用子控件绘制<code>drawChild(canvas, child, drawingTime)</code>,保存裁剪信息;</li>\n<li>判断动画是否结束并回调动画结束函数;</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /sdk/sources/android-26/android/view/ViewGroup.java</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> usingRenderNodeProperties = canvas.isRecordingFor(mRenderNode);</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> flags = mGroupFlags;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((flags &amp; FLAG_RUN_ANIMATION) != <span class=\"number\">0</span> &amp;&amp; canAnimate()) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> buildCache = !isHardwareAccelerated();</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">               <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">final</span> LayoutParams params = child.getLayoutParams();</span><br><span class=\"line\">                   attachLayoutAnimationParameters(child, params, i, childrenCount);</span><br><span class=\"line\">                   bindLayoutAnimation(child);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">final</span> LayoutAnimationController controller = mLayoutAnimationController;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (controller.willOverlap()) &#123;</span><br><span class=\"line\">               mGroupFlags |= FLAG_OPTIMIZE_INVALIDATE;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           controller.start();</span><br><span class=\"line\"></span><br><span class=\"line\">           mGroupFlags &amp;= ~FLAG_RUN_ANIMATION;</span><br><span class=\"line\">           mGroupFlags &amp;= ~FLAG_ANIMATION_DONE;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (mAnimationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               mAnimationListener.onAnimationStart(controller.getAnimation());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> clipSaveCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> clipToPadding = (flags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (clipToPadding) &#123;</span><br><span class=\"line\">           clipSaveCount = canvas.save(Canvas.CLIP_SAVE_FLAG);</span><br><span class=\"line\">           canvas.clipRect(mScrollX + mPaddingLeft, mScrollY + mPaddingTop,</span><br><span class=\"line\">                   mScrollX + mRight - mLeft - mPaddingRight,</span><br><span class=\"line\">                   mScrollY + mBottom - mTop - mPaddingBottom);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// We will draw our child's animation, let's reset the flag</span></span><br><span class=\"line\">       mPrivateFlags &amp;= ~PFLAG_DRAW_ANIMATION;</span><br><span class=\"line\">       mGroupFlags &amp;= ~FLAG_INVALIDATE_REQUIRED;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> more = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> drawingTime = getDrawingTime();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (usingRenderNodeProperties) canvas.insertReorderBarrier();</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> transientCount = mTransientIndices == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : mTransientIndices.size();</span><br><span class=\"line\">       <span class=\"keyword\">int</span> transientIndex = transientCount != <span class=\"number\">0</span> ? <span class=\"number\">0</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"comment\">// Only use the preordered list if not HW accelerated, since the HW pipeline will do the</span></span><br><span class=\"line\">       <span class=\"comment\">// draw reordering internally</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> ArrayList&lt;View&gt; preorderedList = usingRenderNodeProperties</span><br><span class=\"line\">               ? <span class=\"keyword\">null</span> : buildOrderedChildList();</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> customOrder = preorderedList == <span class=\"keyword\">null</span></span><br><span class=\"line\">               &amp;&amp; isChildrenDrawingOrderEnabled();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (transientIndex &gt;= <span class=\"number\">0</span> &amp;&amp; mTransientIndices.get(transientIndex) == i) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> View transientChild = mTransientViews.get(transientIndex);</span><br><span class=\"line\">               <span class=\"keyword\">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</span><br><span class=\"line\">                       transientChild.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               transientIndex++;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (transientIndex &gt;= transientCount) &#123;</span><br><span class=\"line\">                   transientIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);</span><br><span class=\"line\">           <span class=\"keyword\">final</span> View child = getAndVerifyPreorderedView(preorderedList, children, childIndex);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               more |= drawChild(canvas, child, drawingTime);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (transientIndex &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// there may be additional transient views after the normal views</span></span><br><span class=\"line\">           <span class=\"keyword\">final</span> View transientChild = mTransientViews.get(transientIndex);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</span><br><span class=\"line\">                   transientChild.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           transientIndex++;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (transientIndex &gt;= transientCount) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (preorderedList != <span class=\"keyword\">null</span>) preorderedList.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Draw any disappearing views that have animations</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (mDisappearingChildren != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> ArrayList&lt;View&gt; disappearingChildren = mDisappearingChildren;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> disappearingCount = disappearingChildren.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">           <span class=\"comment\">// Go backwards -- we may delete as animations finish</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = disappearingCount; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> View child = disappearingChildren.get(i);</span><br><span class=\"line\">               more |= drawChild(canvas, child, drawingTime);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (usingRenderNodeProperties) canvas.insertInorderBarrier();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (debugDraw()) &#123;</span><br><span class=\"line\">           onDebugDraw(canvas);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (clipToPadding) &#123;</span><br><span class=\"line\">           canvas.restoreToCount(clipSaveCount);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// mGroupFlags might have been updated by drawChild()</span></span><br><span class=\"line\">       flags = mGroupFlags;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((flags &amp; FLAG_INVALIDATE_REQUIRED) == FLAG_INVALIDATE_REQUIRED) &#123;</span><br><span class=\"line\">           invalidate(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((flags &amp; FLAG_ANIMATION_DONE) == <span class=\"number\">0</span> &amp;&amp; (flags &amp; FLAG_NOTIFY_ANIMATION_LISTENER) == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">               mLayoutAnimationController.isDone() &amp;&amp; !more) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// We want to erase the drawing cache and notify the listener after the</span></span><br><span class=\"line\">           <span class=\"comment\">// next frame is drawn because one extra invalidate() is caused by</span></span><br><span class=\"line\">           <span class=\"comment\">// drawChild() after the animation is over</span></span><br><span class=\"line\">           mGroupFlags |= FLAG_NOTIFY_ANIMATION_LISTENER;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> Runnable end = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">              <span class=\"meta\">@Override</span></span><br><span class=\"line\">              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                  notifyAnimationListener();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           post(end);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Draw &#123;<span class=\"doctag\">@link</span> View#isAutofilled()&#125; highlight over view if the view is autofilled.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> canvas The canvas to draw on</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawAutofilledHighlight</span><span class=\"params\">(@NonNull Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (isAutofilled()) &#123;</span><br><span class=\"line\">           Drawable autofilledHighlight = getAutofilledDrawable();</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (autofilledHighlight != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               autofilledHighlight.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getWidth(), getHeight());</span><br><span class=\"line\">               autofilledHighlight.draw(canvas);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-绘制渐变\"><a href=\"#5-绘制渐变\" class=\"headerlink\" title=\"5. 绘制渐变\"></a>5. 绘制渐变</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /sdk/sources/android-26/android/view/View.java</span></span><br><span class=\"line\">......</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Paint p = scrollabilityCache.paint;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Matrix matrix = scrollabilityCache.matrix;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Shader fade = scrollabilityCache.shader;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</span><br><span class=\"line\">          matrix.postTranslate(left, top);</span><br><span class=\"line\">          fade.setLocalMatrix(matrix);</span><br><span class=\"line\">          p.setShader(fade);</span><br><span class=\"line\">          canvas.drawRect(left, top, right, top + length, p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (drawBottom) &#123;</span><br><span class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * bottomFadeStrength);</span><br><span class=\"line\">          matrix.postRotate(<span class=\"number\">180</span>);</span><br><span class=\"line\">          matrix.postTranslate(left, bottom);</span><br><span class=\"line\">          fade.setLocalMatrix(matrix);</span><br><span class=\"line\">          p.setShader(fade);</span><br><span class=\"line\">          canvas.drawRect(left, bottom - length, right, bottom, p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (drawLeft) &#123;</span><br><span class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * leftFadeStrength);</span><br><span class=\"line\">          matrix.postRotate(-<span class=\"number\">90</span>);</span><br><span class=\"line\">          matrix.postTranslate(left, top);</span><br><span class=\"line\">          fade.setLocalMatrix(matrix);</span><br><span class=\"line\">          p.setShader(fade);</span><br><span class=\"line\">          canvas.drawRect(left, top, left + length, bottom, p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (drawRight) &#123;</span><br><span class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * rightFadeStrength);</span><br><span class=\"line\">          matrix.postRotate(<span class=\"number\">90</span>);</span><br><span class=\"line\">          matrix.postTranslate(right, top);</span><br><span class=\"line\">          fade.setLocalMatrix(matrix);</span><br><span class=\"line\">          p.setShader(fade);</span><br><span class=\"line\">          canvas.drawRect(right - length, top, right, bottom, p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      canvas.restoreToCount(saveCount);</span><br><span class=\"line\"></span><br><span class=\"line\">      drawAutofilledHighlight(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Overlay is part of the content and draws beneath Foreground</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mOverlay != <span class=\"keyword\">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class=\"line\">          mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-绘制装饰附加内容\"><a href=\"#6-绘制装饰附加内容\" class=\"headerlink\" title=\"6. 绘制装饰附加内容\"></a>6. 绘制装饰附加内容</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* // /sdk/sources/android-26/android/view/View.java</span></span><br><span class=\"line\"><span class=\"comment\">   * Draw any foreground content for this view.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;p&gt;Foreground content may consist of scroll bars, a &#123;<span class=\"doctag\">@link</span> #setForeground foreground&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   * drawable or other view-specific decorations. The foreground is drawn on top of the</span></span><br><span class=\"line\"><span class=\"comment\">   * primary view content.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> canvas canvas to draw into</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawForeground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">      onDrawScrollIndicators(canvas);</span><br><span class=\"line\">      onDrawScrollBars(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">final</span> Drawable foreground = mForegroundInfo != <span class=\"keyword\">null</span> ? mForegroundInfo.mDrawable : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (mForegroundInfo.mBoundsChanged) &#123;</span><br><span class=\"line\">              mForegroundInfo.mBoundsChanged = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">final</span> Rect selfBounds = mForegroundInfo.mSelfBounds;</span><br><span class=\"line\">              <span class=\"keyword\">final</span> Rect overlayBounds = mForegroundInfo.mOverlayBounds;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (mForegroundInfo.mInsidePadding) &#123;</span><br><span class=\"line\">                  selfBounds.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getWidth(), getHeight());</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  selfBounds.set(getPaddingLeft(), getPaddingTop(),</span><br><span class=\"line\">                          getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ld = getLayoutDirection();</span><br><span class=\"line\">              Gravity.apply(mForegroundInfo.mGravity, foreground.getIntrinsicWidth(),</span><br><span class=\"line\">                      foreground.getIntrinsicHeight(), selfBounds, overlayBounds, ld);</span><br><span class=\"line\">              foreground.setBounds(overlayBounds);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          foreground.draw(canvas);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"<h1 id=\"控件的测量-布局-绘制过程\"><a href=\"#控件的测量-布局-绘制过程\" class=\"headerlink\" title=\"控件的测量,布局,绘制过程\"></a>控件的测量,布局,绘制过程</h1><pre><code>目录:\n    - 测量\n        1. 测量之MeasureSpec与LayoutParams\n        2. View # onMeasure(int,int)\n        3. ViewGroup # measureChildren()\n        4. 测量某个View的宽高的方式\n    - 布局\n        1. View # layout(int,int,int,int)\n        2. View # onLayout()\n            1. LinearLayout\n            2. RelativeLayout\n            3. FrameLayout\n    - 绘制\n        View # draw(Canvas)\n            1. Draw the background    绘制背景\n            2. If necessary, save the canvas&apos; layers to prepare for fading\n            3. Draw view&apos;s content    绘制内容\n            4. Draw children        绘制子控件\n            5. If necessary, draw the fading edges and restore layers\n            6. Draw decorations (scrollbars for instance) 绘制附加内容\n\n参考自:\n        1. 《 Android 开发艺术探索 》 : Page 174\n        2. Android开发之自定义控件(二)---onLayout详解 : http://blog.csdn.net/dmk877/article/details/49632959\n</code></pre>","more":"<hr>\n<h3 id=\"测量\"><a href=\"#测量\" class=\"headerlink\" title=\"测量\"></a>测量</h3><h4 id=\"1-测量之MeasureSpec与LayoutParams\"><a href=\"#1-测量之MeasureSpec与LayoutParams\" class=\"headerlink\" title=\"1. 测量之MeasureSpec与LayoutParams\"></a>1. 测量之<code>MeasureSpec</code>与<code>LayoutParams</code></h4><p><a href=\"https://github.com/SchafferWang0818/SchafferBaseLibrary/blob/master/notes/Android%E4%B9%8B%E6%98%BE%E7%A4%BA%E2%80%94%E2%80%94WindowManager.md#windowmanagerlayoutparams\" target=\"_blank\" rel=\"noopener\"><strong><code>WindowManager$LayoutParams</code> 友情链接 点击此处</strong> </a></p>\n<blockquote>\n<p>《 Android 开发艺术探索 》<br>对于 <code>DecorView</code> ，其 <code>MeasureSpec</code> 由窗口的尺寸和其自身的 <code>LayoutParams</code> 来共同决定;<br>对于普通 <code>View</code>，其 <code>MeasureSpec</code> 由<font color=\"red\"> <strong>父容器</strong> </font>的<code>MeasureSpec</code>和自身的 <code>LayoutParams</code> 来共同决定。</p>\n<font color=\"red\"> <strong><code>parentSize</code>指父容器当前剩余的空间大小。</strong></font>\n\n</blockquote>\n<p><img src=\"https://i.imgur.com/vfDqiS1.png\" alt=\"MeasureSpec\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ViewGroup.java</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class=\"line\">               mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, </span><br><span class=\"line\">\t\t\tlp.width);</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class=\"line\">               mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed, </span><br><span class=\"line\">\t\t\tlp.height);</span><br><span class=\"line\"></span><br><span class=\"line\">       child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class=\"line\">       <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// Parent has imposed an exact size on us</span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               resultSize = childDimension;</span><br><span class=\"line\">               resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to be our size. So be it.</span></span><br><span class=\"line\">               resultSize = size;</span><br><span class=\"line\">               resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to determine its own size. It can't be</span></span><br><span class=\"line\">               <span class=\"comment\">// bigger than us.</span></span><br><span class=\"line\">               resultSize = size;</span><br><span class=\"line\">               resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Parent has imposed a maximum size on us</span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants a specific size... so be it</span></span><br><span class=\"line\">               resultSize = childDimension;</span><br><span class=\"line\">               resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></span><br><span class=\"line\">               <span class=\"comment\">// Constrain child to not be bigger than us.</span></span><br><span class=\"line\">               resultSize = size;</span><br><span class=\"line\">               resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to determine its own size. It can't be</span></span><br><span class=\"line\">               <span class=\"comment\">// bigger than us.</span></span><br><span class=\"line\">               resultSize = size;</span><br><span class=\"line\">               resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Parent asked to see how big we want to be</span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants a specific size... let him have it</span></span><br><span class=\"line\">               resultSize = childDimension;</span><br><span class=\"line\">               resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to be our size... find out how big it should</span></span><br><span class=\"line\">               <span class=\"comment\">// be</span></span><br><span class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</span><br><span class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Child wants to determine its own size.... find out how</span></span><br><span class=\"line\">               <span class=\"comment\">// big it should be</span></span><br><span class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</span><br><span class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//noinspection ResourceType</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"2-View-onMeasure-int-int\"><a href=\"#2-View-onMeasure-int-int\" class=\"headerlink\" title=\"2. View # onMeasure(int,int)\"></a>2. <code>View # onMeasure(int,int)</code></h4><blockquote>\n<ol>\n<li><code>MeasureSpec.getSize(measureSpec)</code> 就是<code>View</code>测量后的大小,在<code>layout()</code>阶段确定; </li>\n<li><code>getSuggestedMinimumWidth/Height()</code>设置默认大小:<ul>\n<li>当未设置背景时,由<code>android:minWidth/minHeight</code>决定;</li>\n<li>当已设置背景时,由背景Drawable原始大小最小值与<code>android:minWidth/minHeight</code>决定; </li>\n</ul>\n</li>\n<li><font color=\"red\"><strong>依照上表, 当自定义<code>View</code> 直接继承自<code>View</code>重写<code>onMeasure()</code>并设置<code>wrap_content</code>时,相当于直接填充了父容器剩余所有空间<code>match_parent</code>。可以通过<code>onMeasure()</code>设置宽高默认值解决</strong></font>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( widthMode==MeasureSpec.AT_MOST </span><br><span class=\"line\">\t\t\t\t&amp;&amp; heightMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">\t\t\tsetMeasureDimension(mWidth , mHeight);  </span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(widthMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">\t\t\tsetMeasureDimension(mWidth , heightSize);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(heightMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">\t\t\tsetMeasureDimension(widthSize , mHeight);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;\t  </span><br><span class=\"line\"></span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @param widthMeasureSpec horizontal space requirements as imposed by the parent.</span></span><br><span class=\"line\"><span class=\"comment\">     *                         The requirements are encoded with</span></span><br><span class=\"line\"><span class=\"comment\">     *                         &#123;@link android.view.View.MeasureSpec&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * @param heightMeasureSpec vertical space requirements as imposed by the parent.</span></span><br><span class=\"line\"><span class=\"comment\">     *                         The requirements are encoded with</span></span><br><span class=\"line\"><span class=\"comment\">     *                         &#123;@link android.view.View.MeasureSpec&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @see #getMeasuredWidth()</span></span><br><span class=\"line\"><span class=\"comment\">     * @see #getMeasuredHeight()</span></span><br><span class=\"line\"><span class=\"comment\">     * @see #setMeasuredDimension(int, int)</span></span><br><span class=\"line\"><span class=\"comment\">     * @see #getSuggestedMinimumHeight()</span></span><br><span class=\"line\"><span class=\"comment\">     * @see #getSuggestedMinimumWidth()</span></span><br><span class=\"line\"><span class=\"comment\">     * @see android.view.View.MeasureSpec#getMode(int)</span></span><br><span class=\"line\"><span class=\"comment\">     * @see android.view.View.MeasureSpec#getSize(int)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置宽高的测量值</span></span><br><span class=\"line\">        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),</span><br><span class=\"line\">                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 设置默认值</span></span><br><span class=\"line\"><span class=\"comment\">     * Utility to return a default size. Uses the supplied size if the</span></span><br><span class=\"line\"><span class=\"comment\">     * MeasureSpec imposed no constraints. Will get larger if allowed</span></span><br><span class=\"line\"><span class=\"comment\">     * by the MeasureSpec.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size Default size for this view</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> measureSpec Constraints imposed by the parent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The size this view should be.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = size;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            result = size;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">            result = specSize;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"3-ViewGroup-measureChildren\"><a href=\"#3-ViewGroup-measureChildren\" class=\"headerlink\" title=\"3. ViewGroup # measureChildren()\"></a>3. <code>ViewGroup # measureChildren()</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* ViewGroup.java </span></span><br><span class=\"line\"><span class=\"comment\">* 循环创建子元素的测量算子和子元素的LayoutParams通过子元素的measure()进行测量;</span></span><br><span class=\"line\"><span class=\"comment\">   * Ask all of the children of this view to measure themselves, taking into</span></span><br><span class=\"line\"><span class=\"comment\">   * account both the MeasureSpec requirements for this view and its padding.</span></span><br><span class=\"line\"><span class=\"comment\">   * We skip children that are in the GONE state The heavy lifting is done in</span></span><br><span class=\"line\"><span class=\"comment\">   * getChildMeasureSpec.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> widthMeasureSpec The width requirements for this view</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> heightMeasureSpec The height requirements for this view</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = mChildrenCount;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</span><br><span class=\"line\">              measureChild(child, widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"4-测量某个View的宽高的方式\"><a href=\"#4-测量某个View的宽高的方式\" class=\"headerlink\" title=\"4. 测量某个View的宽高的方式\"></a>4. 测量某个View的宽高的方式</h4><ol>\n<li><p><code>Activity/View # onWindowFocusChanged(boolean)</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> hasWindowFocus)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onWindowFocusChanged(hasWindowFocus);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasWindowFocus) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//measureLines();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>View # post(Runnable)</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">view.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        view.getWidth(); <span class=\"comment\">// 获取宽度</span></span><br><span class=\"line\">        view.getHeight(); <span class=\"comment\">// 获取高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ViewTreeObserver</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.getViewTreeObserver().addOnGlobalLayoutListener(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">            view.getViewTreeObserver()</span><br><span class=\"line\">                    .removeOnGlobalLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            view.getViewTreeObserver()</span><br><span class=\"line\">                    .removeGlobalOnLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        view.getWidth(); <span class=\"comment\">// 获取宽度</span></span><br><span class=\"line\">        view.getHeight(); <span class=\"comment\">// 获取高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>View # measure(int,int)</code></p>\n<ul>\n<li><p>设置固定数值</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> width = View.MeasureSpec.makeMeasureSpec(<span class=\"number\">100</span>,</span><br><span class=\"line\">      \t\tView.MeasureSpec.EXACTLY);</span><br><span class=\"line\"><span class=\"keyword\">int</span> height = View.MeasureSpec.makeMeasureSpec(<span class=\"number\">100</span>,</span><br><span class=\"line\">        View.MeasureSpec.EXACTLY);</span><br><span class=\"line\">view.measure(width, height);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>wrap_content</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> width = View.MeasureSpec.makeMeasureSpec((<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">30</span>)-<span class=\"number\">1</span>,</span><br><span class=\"line\">      \t\tView.MeasureSpec.AT_MOST);</span><br><span class=\"line\"><span class=\"keyword\">int</span> height = View.MeasureSpec.makeMeasureSpec((<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">30</span>)-<span class=\"number\">1</span>,</span><br><span class=\"line\">        View.MeasureSpec.AT_MOST);</span><br><span class=\"line\">view.measure(width, height);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"布局Layout\"><a href=\"#布局Layout\" class=\"headerlink\" title=\"布局Layout\"></a>布局<code>Layout</code></h3><blockquote>\n<p>《 Android 开发艺术探索 》: <font color=\"orange\"><strong><code>ViewGroup</code>用来确定子元素的位置, <code>layout()</code>确定的是<code>ViewGroup</code>本身的位置,而<code>onLayout()</code>确定的是所有子控件的位置;.</strong></font><br>onLayout详解 : <font color=\"orange\"><strong>自定义控件的第二步<code>onLayout</code>即确定控件的位置</strong></font></p>\n</blockquote>\n<h4 id=\"1-layout-int-int-int-int\"><a href=\"#1-layout-int-int-int-int\" class=\"headerlink\" title=\"1. layout(int,int,int,int)\"></a>1. <code>layout(int,int,int,int)</code></h4><p>主要有以下步骤:</p>\n<ol>\n<li><font color=\"red\"><strong><code>View # setFrame(l, t, r, b)</code>初始化mLeft、mRight、mTop、mBottom，设置当前<code>View/ViewGroup</code>的四个顶点的位置;</strong></font></li>\n<li><font color=\"green\"><strong><code>View # onLayout(changed, l, t, r, b)</code>确定子控件位置;</strong></font></li>\n<li><font color=\"blue\"><strong>判断<code>viewGroup.mOnLayoutChangeListeners</code>的存在,并调用<code>View $ OnLayoutChangeListener # onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB)</code>; </strong></font>\n\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * android-26/android.view.ViewGroup.java</span></span><br><span class=\"line\"><span class=\"comment\">    * ViewGroup # layout(int l, int t, int r, int b)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!mSuppressLayout &amp;&amp; (mTransition == <span class=\"keyword\">null</span> || !mTransition.isChangingLayout())) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (mTransition != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               mTransition.layoutChange(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>.layout(l, t, r, b);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">// record the fact that we noop'd it; request layout when transition finishes</span></span><br><span class=\"line\">           mLayoutCalledWhileSuppressed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * android-26/android.view.View.java</span></span><br><span class=\"line\"><span class=\"comment\">    * View # layout(int l, int t, int r, int b)</span></span><br><span class=\"line\"><span class=\"comment\">    * </span></span><br><span class=\"line\"><span class=\"comment\">    * Assign a size and position to a view and all of its</span></span><br><span class=\"line\"><span class=\"comment\">    * descendants</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;p&gt;This is the second phase of the layout mechanism.</span></span><br><span class=\"line\"><span class=\"comment\">    * (The first is measuring). In this phase, each parent calls</span></span><br><span class=\"line\"><span class=\"comment\">    * layout on all of its children to position them.</span></span><br><span class=\"line\"><span class=\"comment\">    * This is typically done using the child measurements</span></span><br><span class=\"line\"><span class=\"comment\">    * that were stored in the measure pass().&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;p&gt;Derived classes should not override this method.</span></span><br><span class=\"line\"><span class=\"comment\">    * Derived classes with children should override</span></span><br><span class=\"line\"><span class=\"comment\">    * onLayout. In that method, they should</span></span><br><span class=\"line\"><span class=\"comment\">    * call layout on each of their children.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> l Left position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> t Top position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> r Right position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> b Bottom position, relative to parent</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</span><br><span class=\"line\">           mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> oldL = mLeft;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> oldT = mTop;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> oldB = mBottom;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> oldR = mRight;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</span><br><span class=\"line\">               setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class=\"line\">           onLayout(changed, l, t, r, b);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (shouldDrawRoundScrollbar()) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(mRoundScrollbarRenderer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   mRoundScrollbarRenderer = <span class=\"keyword\">new</span> RoundScrollbarRenderer(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               mRoundScrollbarRenderer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</span><br><span class=\"line\"></span><br><span class=\"line\">           ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</span><br><span class=\"line\">                       (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</span><br><span class=\"line\">               <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class=\"line\">                   listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</span><br><span class=\"line\">       mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           mPrivateFlags3 &amp;= ~PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT;</span><br><span class=\"line\">           notifyEnterOrExitForAutoFillIfNeeded(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"2-View-onLayout\"><a href=\"#2-View-onLayout\" class=\"headerlink\" title=\"2. View # onLayout()\"></a>2. <code>View # onLayout()</code></h4><p>以 LinearLayout、RelativeLayout、FrameLayout 为例,代码如下.</p>\n<h5 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout\"></a><code>LinearLayout</code></h5><p>以竖直方向为例,由于 <code>LinearLayout</code>特性,当设置竖直方向时,循环得到子控件的<code>mTop(childTop,包含marginTop)</code>, <strong>根据模拟测量宽高</strong>调用<code>setChildFrame(...)</code>间接调用<code>child.layout(...)</code>为子控件指定对应的位置; 然后继续叠加<code>mTop</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">        layoutVertical(l, t, r, b);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        layoutHorizontal(l, t, r, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 以竖直方向为例</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * Position the children during a layout pass if the orientation of this</span></span><br><span class=\"line\"><span class=\"comment\"> * LinearLayout is set to &#123;<span class=\"doctag\">@link</span> #VERTICAL&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #getOrientation()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #setOrientation(int)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #onLayout(boolean, int, int, int, int)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> top</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bottom</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> childTop;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> childLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Where right end of child should go</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = right - left;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> childRight = width - mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Space available for child</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> childSpace = width - paddingLeft - mPaddingRight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (majorGravity) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> Gravity.BOTTOM:</span><br><span class=\"line\">           <span class=\"comment\">// mTotalLength contains the padding already</span></span><br><span class=\"line\">&gt;&gt;&gt;&gt;       childTop = mPaddingTop + bottom - top - mTotalLength;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// mTotalLength contains the padding already</span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</span><br><span class=\"line\">&gt;&gt;&gt;&gt;       childTop = mPaddingTop + (bottom - top - mTotalLength) / <span class=\"number\">2</span>;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">case</span> Gravity.TOP:</span><br><span class=\"line\">       <span class=\"keyword\">default</span>:</span><br><span class=\"line\">           childTop = mPaddingTop;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            childTop += measureNullChild(i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =</span><br><span class=\"line\">                    (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> gravity = lp.gravity;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (gravity &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                gravity = minorGravity;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</span><br><span class=\"line\">                    childLeft = paddingLeft + ((childSpace - childWidth) / <span class=\"number\">2</span>)</span><br><span class=\"line\">                            + lp.leftMargin - lp.rightMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.RIGHT:</span><br><span class=\"line\">                    childLeft = childRight - childWidth - lp.rightMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.LEFT:</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    childLeft = paddingLeft + lp.leftMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</span><br><span class=\"line\">                childTop += mDividerHeight;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            childTop += lp.topMargin;</span><br><span class=\"line\">            setChildFrame(child, childLeft, childTop + getLocationOffset(child),</span><br><span class=\"line\">                    childWidth, childHeight);</span><br><span class=\"line\">            childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</span><br><span class=\"line\"></span><br><span class=\"line\">            i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"RelativeLayout\"><a href=\"#RelativeLayout\" class=\"headerlink\" title=\"RelativeLayout\"></a><code>RelativeLayout</code></h5><p>看似很简单的操作.更多的操作已经在初始化或在<code>onMeasure()</code>中已经完成,例如<font color=\"blue\"><strong>在<code>onMeasure()</code>中子控件之间的”<code>toLeftOf</code>“等相关view,已经存储入对应数组,并在循环中调用 <code>applyHorizontalSizeRules(params, myWidth, rules)</code> 对子控件位置信息进行设置</strong></font>;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//  The layout has actually already been performed and the positions</span></span><br><span class=\"line\">       <span class=\"comment\">//  cached.  Apply the cached values to the children.</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">           View child = getChildAt(i);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">               RelativeLayout.LayoutParams st =</span><br><span class=\"line\">                       (RelativeLayout.LayoutParams) child.getLayoutParams();</span><br><span class=\"line\">               child.layout(st.mLeft, st.mTop, st.mRight, st.mBottom);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"FrameLayout\"><a href=\"#FrameLayout\" class=\"headerlink\" title=\"FrameLayout\"></a><code>FrameLayout</code></h5><font color=\"blue\"><strong>与<code>RelativeLayout</code>相比,多了权重的判断,少了关系判断</strong>.</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">    layoutChildren(left, top, right, bottom, <span class=\"keyword\">false</span> <span class=\"comment\">/* no force left gravity */</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom, <span class=\"keyword\">boolean</span> forceLeftGravity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentLeft = getPaddingLeftWithForeground();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentRight = right - left - getPaddingRightWithForeground();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentTop = getPaddingTopWithForeground();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentBottom = bottom - top - getPaddingBottomWithForeground();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getChildAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = child.getMeasuredWidth();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = child.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> childLeft;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> childTop;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> gravity = lp.gravity;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (gravity == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                gravity = DEFAULT_CHILD_GRAVITY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getLayoutDirection();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> verticalGravity = gravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</span><br><span class=\"line\">                    childLeft = parentLeft + (parentRight - parentLeft - width) / <span class=\"number\">2</span> +</span><br><span class=\"line\">                    lp.leftMargin - lp.rightMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.RIGHT:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!forceLeftGravity) &#123;</span><br><span class=\"line\">                        childLeft = parentRight - width - lp.rightMargin;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.LEFT:</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    childLeft = parentLeft + lp.leftMargin;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (verticalGravity) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.TOP:</span><br><span class=\"line\">                    childTop = parentTop + lp.topMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</span><br><span class=\"line\">                    childTop = parentTop + (parentBottom - parentTop - height) / <span class=\"number\">2</span> +</span><br><span class=\"line\">                    lp.topMargin - lp.bottomMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Gravity.BOTTOM:</span><br><span class=\"line\">                    childTop = parentBottom - height - lp.bottomMargin;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    childTop = parentTop + lp.topMargin;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            child.layout(childLeft, childTop, childLeft + width, childTop + height);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Draw\"><a href=\"#Draw\" class=\"headerlink\" title=\"Draw\"></a>Draw</h3><p>绘制操作代码如下.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Manually render this view (and all of its children) to the given Canvas.</span></span><br><span class=\"line\"><span class=\"comment\">    * The view must have already done a full layout before this function is</span></span><br><span class=\"line\"><span class=\"comment\">    * called.  When implementing a view, implement</span></span><br><span class=\"line\"><span class=\"comment\">    * &#123;<span class=\"doctag\">@link</span> #onDraw(android.graphics.Canvas)&#125; instead of overriding this method.</span></span><br><span class=\"line\"><span class=\"comment\">    * If you do need to override this method, call the superclass version.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> canvas The Canvas to which the View is rendered.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@CallSuper</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> privateFlags = mPrivateFlags;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;</span><br><span class=\"line\">               (mAttachInfo == <span class=\"keyword\">null</span> || !mAttachInfo.mIgnoreDirtyState);</span><br><span class=\"line\">       mPrivateFlags = (privateFlags &amp; ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Draw traversal performs several drawing steps which must be executed</span></span><br><span class=\"line\"><span class=\"comment\">        * in the appropriate order:</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        *      1. Draw the background\t绘制背景</span></span><br><span class=\"line\"><span class=\"comment\">        *      2. If necessary, save the canvas' layers to prepare for fading</span></span><br><span class=\"line\"><span class=\"comment\">        *      3. Draw view's content\t绘制内容</span></span><br><span class=\"line\"><span class=\"comment\">        *      4. Draw children\t\t绘制子控件</span></span><br><span class=\"line\"><span class=\"comment\">        *      5. If necessary, draw the fading edges and restore layers</span></span><br><span class=\"line\"><span class=\"comment\">        *      6. Draw decorations (scrollbars for instance) 绘制附加内容</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 1, draw the background, if needed</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> saveCount;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</span><br><span class=\"line\">           drawBackground(canvas);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// skip step 2 &amp; 5 if possible (common case)</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewFlags = mViewFlags;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!verticalEdges &amp;&amp; !horizontalEdges) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// Step 3, draw the content</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Step 4, draw the children</span></span><br><span class=\"line\">           dispatchDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">           drawAutofilledHighlight(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Overlay is part of the content and draws beneath Foreground</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (mOverlay != <span class=\"keyword\">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class=\"line\">               mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Step 6, draw decorations (foreground, scrollbars)</span></span><br><span class=\"line\">           onDrawForeground(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Step 7, draw the default focus highlight</span></span><br><span class=\"line\">           drawDefaultFocusHighlight(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (debugDraw()) &#123;</span><br><span class=\"line\">               debugDrawFocus(canvas);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// we're done...</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Here we do the full fledged routine...</span></span><br><span class=\"line\"><span class=\"comment\">        * (this is an uncommon case where speed matters less,</span></span><br><span class=\"line\"><span class=\"comment\">        * this is why we repeat some of the tests that have been</span></span><br><span class=\"line\"><span class=\"comment\">        * done above)</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> drawTop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> drawBottom = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> drawLeft = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> drawRight = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">float</span> topFadeStrength = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">       <span class=\"keyword\">float</span> bottomFadeStrength = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">       <span class=\"keyword\">float</span> leftFadeStrength = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">       <span class=\"keyword\">float</span> rightFadeStrength = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 2, save the canvas' layers</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> offsetRequired = isPaddingOffsetRequired();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (offsetRequired) &#123;</span><br><span class=\"line\">           paddingLeft += getLeftPaddingOffset();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> left = mScrollX + paddingLeft;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> right = left + mRight - mLeft - mPaddingRight - paddingLeft;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> top = mScrollY + getFadeTop(offsetRequired);</span><br><span class=\"line\">       <span class=\"keyword\">int</span> bottom = top + getFadeHeight(offsetRequired);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (offsetRequired) &#123;</span><br><span class=\"line\">           right += getRightPaddingOffset();</span><br><span class=\"line\">           bottom += getBottomPaddingOffset();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">final</span> ScrollabilityCache scrollabilityCache = mScrollCache;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> fadeHeight = scrollabilityCache.fadingEdgeLength;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> length = (<span class=\"keyword\">int</span>) fadeHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// clip the fade length if top and bottom fades overlap</span></span><br><span class=\"line\">       <span class=\"comment\">// overlapping fades produce odd-looking artifacts</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (verticalEdges &amp;&amp; (top + length &gt; bottom - length)) &#123;</span><br><span class=\"line\">           length = (bottom - top) / <span class=\"number\">2</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// also clip horizontal fades if necessary</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (horizontalEdges &amp;&amp; (left + length &gt; right - length)) &#123;</span><br><span class=\"line\">           length = (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (verticalEdges) &#123;</span><br><span class=\"line\">           topFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getTopFadingEdgeStrength()));</span><br><span class=\"line\">           drawTop = topFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">           bottomFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getBottomFadingEdgeStrength()));</span><br><span class=\"line\">           drawBottom = bottomFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (horizontalEdges) &#123;</span><br><span class=\"line\">           leftFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getLeftFadingEdgeStrength()));</span><br><span class=\"line\">           drawLeft = leftFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">           rightFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getRightFadingEdgeStrength()));</span><br><span class=\"line\">           drawRight = rightFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       saveCount = canvas.getSaveCount();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> solidColor = getSolidColor();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (solidColor == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">               canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (drawBottom) &#123;</span><br><span class=\"line\">               canvas.saveLayer(left, bottom - length, right, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (drawLeft) &#123;</span><br><span class=\"line\">               canvas.saveLayer(left, top, left + length, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (drawRight) &#123;</span><br><span class=\"line\">               canvas.saveLayer(right - length, top, right, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           scrollabilityCache.setFadeColor(solidColor);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 3, draw the content</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 4, draw the children</span></span><br><span class=\"line\">       dispatchDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> Paint p = scrollabilityCache.paint;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> Matrix matrix = scrollabilityCache.matrix;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> Shader fade = scrollabilityCache.shader;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">           matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</span><br><span class=\"line\">           matrix.postTranslate(left, top);</span><br><span class=\"line\">           fade.setLocalMatrix(matrix);</span><br><span class=\"line\">           p.setShader(fade);</span><br><span class=\"line\">           canvas.drawRect(left, top, right, top + length, p);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (drawBottom) &#123;</span><br><span class=\"line\">           matrix.setScale(<span class=\"number\">1</span>, fadeHeight * bottomFadeStrength);</span><br><span class=\"line\">           matrix.postRotate(<span class=\"number\">180</span>);</span><br><span class=\"line\">           matrix.postTranslate(left, bottom);</span><br><span class=\"line\">           fade.setLocalMatrix(matrix);</span><br><span class=\"line\">           p.setShader(fade);</span><br><span class=\"line\">           canvas.drawRect(left, bottom - length, right, bottom, p);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (drawLeft) &#123;</span><br><span class=\"line\">           matrix.setScale(<span class=\"number\">1</span>, fadeHeight * leftFadeStrength);</span><br><span class=\"line\">           matrix.postRotate(-<span class=\"number\">90</span>);</span><br><span class=\"line\">           matrix.postTranslate(left, top);</span><br><span class=\"line\">           fade.setLocalMatrix(matrix);</span><br><span class=\"line\">           p.setShader(fade);</span><br><span class=\"line\">           canvas.drawRect(left, top, left + length, bottom, p);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (drawRight) &#123;</span><br><span class=\"line\">           matrix.setScale(<span class=\"number\">1</span>, fadeHeight * rightFadeStrength);</span><br><span class=\"line\">           matrix.postRotate(<span class=\"number\">90</span>);</span><br><span class=\"line\">           matrix.postTranslate(right, top);</span><br><span class=\"line\">           fade.setLocalMatrix(matrix);</span><br><span class=\"line\">           p.setShader(fade);</span><br><span class=\"line\">           canvas.drawRect(right - length, top, right, bottom, p);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       canvas.restoreToCount(saveCount);</span><br><span class=\"line\"></span><br><span class=\"line\">       drawAutofilledHighlight(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Overlay is part of the content and draws beneath Foreground</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (mOverlay != <span class=\"keyword\">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class=\"line\">           mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Step 6, draw decorations (foreground, scrollbars)</span></span><br><span class=\"line\">       onDrawForeground(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (debugDraw()) &#123;</span><br><span class=\"line\">           debugDrawFocus(canvas);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-绘制背景\"><a href=\"#1-绘制背景\" class=\"headerlink\" title=\"1. 绘制背景\"></a>1. 绘制背景</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * /sdk/sources/android-26/android/view/View.java</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * Draws the background onto the specified canvas.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> canvas Canvas on which to draw the background</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBackground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Drawable background = mBackground;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (background == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setBackgroundBounds();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Attempt to use a display list if requested.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (canvas.isHardwareAccelerated() &amp;&amp; mAttachInfo != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; mAttachInfo.mThreadedRenderer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> RenderNode renderNode = mBackgroundRenderNode;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (renderNode != <span class=\"keyword\">null</span> &amp;&amp; renderNode.isValid()) &#123;</span><br><span class=\"line\">            setBackgroundRenderNodeProperties(renderNode);</span><br><span class=\"line\">            ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollX = mScrollX;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollY = mScrollY;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((scrollX | scrollY) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        background.draw(canvas);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        canvas.translate(scrollX, scrollY);</span><br><span class=\"line\">        background.draw(canvas);</span><br><span class=\"line\">        canvas.translate(-scrollX, -scrollY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-保存画布用于⑤绘制渐变\"><a href=\"#2-保存画布用于⑤绘制渐变\" class=\"headerlink\" title=\"2. 保存画布用于⑤绘制渐变\"></a>2. 保存画布用于⑤绘制渐变</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /sdk/sources/android-26/android/view/View.java</span></span><br><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"comment\">// Step 2, save the canvas' layers</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> offsetRequired = isPaddingOffsetRequired();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offsetRequired) &#123;</span><br><span class=\"line\">          paddingLeft += getLeftPaddingOffset();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> left = mScrollX + paddingLeft;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> right = left + mRight - mLeft - mPaddingRight - paddingLeft;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> top = mScrollY + getFadeTop(offsetRequired);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> bottom = top + getFadeHeight(offsetRequired);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offsetRequired) &#123;</span><br><span class=\"line\">          right += getRightPaddingOffset();</span><br><span class=\"line\">          bottom += getBottomPaddingOffset();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">final</span> ScrollabilityCache scrollabilityCache = mScrollCache;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> fadeHeight = scrollabilityCache.fadingEdgeLength;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> length = (<span class=\"keyword\">int</span>) fadeHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// clip the fade length if top and bottom fades overlap</span></span><br><span class=\"line\">      <span class=\"comment\">// overlapping fades produce odd-looking artifacts</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (verticalEdges &amp;&amp; (top + length &gt; bottom - length)) &#123;</span><br><span class=\"line\">          length = (bottom - top) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// also clip horizontal fades if necessary</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (horizontalEdges &amp;&amp; (left + length &gt; right - length)) &#123;</span><br><span class=\"line\">          length = (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (verticalEdges) &#123;</span><br><span class=\"line\">          topFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getTopFadingEdgeStrength()));</span><br><span class=\"line\">          drawTop = topFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">          bottomFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getBottomFadingEdgeStrength()));</span><br><span class=\"line\">          drawBottom = bottomFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (horizontalEdges) &#123;</span><br><span class=\"line\">          leftFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getLeftFadingEdgeStrength()));</span><br><span class=\"line\">          drawLeft = leftFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">          rightFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getRightFadingEdgeStrength()));</span><br><span class=\"line\">          drawRight = rightFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      saveCount = canvas.getSaveCount();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> solidColor = getSolidColor();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (solidColor == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">              canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (drawBottom) &#123;</span><br><span class=\"line\">              canvas.saveLayer(left, bottom - length, right, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (drawLeft) &#123;</span><br><span class=\"line\">              canvas.saveLayer(left, top, left + length, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (drawRight) &#123;</span><br><span class=\"line\">              canvas.saveLayer(right - length, top, right, bottom, <span class=\"keyword\">null</span>, flags);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          scrollabilityCache.setFadeColor(solidColor);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-绘制内容\"><a href=\"#3-绘制内容\" class=\"headerlink\" title=\"3. 绘制内容\"></a>3. 绘制内容</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* // /sdk/sources/android-26/android/view/View.java</span></span><br><span class=\"line\"><span class=\"comment\">   * Implement this to do your drawing.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> canvas the canvas on which the background will be drawn</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-绘制子控件\"><a href=\"#4-绘制子控件\" class=\"headerlink\" title=\"4. 绘制子控件\"></a>4. 绘制子控件</h4><p>步骤:</p>\n<ol>\n<li>设置子控件的LayoutAnimation并设置动画监听;</li>\n<li>判断<code>clipToPadding</code>,是否裁剪;</li>\n<li>循环调用子控件绘制<code>drawChild(canvas, child, drawingTime)</code>,保存裁剪信息;</li>\n<li>判断动画是否结束并回调动画结束函数;</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /sdk/sources/android-26/android/view/ViewGroup.java</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> usingRenderNodeProperties = canvas.isRecordingFor(mRenderNode);</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> flags = mGroupFlags;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((flags &amp; FLAG_RUN_ANIMATION) != <span class=\"number\">0</span> &amp;&amp; canAnimate()) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> buildCache = !isHardwareAccelerated();</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">               <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">final</span> LayoutParams params = child.getLayoutParams();</span><br><span class=\"line\">                   attachLayoutAnimationParameters(child, params, i, childrenCount);</span><br><span class=\"line\">                   bindLayoutAnimation(child);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">final</span> LayoutAnimationController controller = mLayoutAnimationController;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (controller.willOverlap()) &#123;</span><br><span class=\"line\">               mGroupFlags |= FLAG_OPTIMIZE_INVALIDATE;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           controller.start();</span><br><span class=\"line\"></span><br><span class=\"line\">           mGroupFlags &amp;= ~FLAG_RUN_ANIMATION;</span><br><span class=\"line\">           mGroupFlags &amp;= ~FLAG_ANIMATION_DONE;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (mAnimationListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               mAnimationListener.onAnimationStart(controller.getAnimation());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> clipSaveCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> clipToPadding = (flags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (clipToPadding) &#123;</span><br><span class=\"line\">           clipSaveCount = canvas.save(Canvas.CLIP_SAVE_FLAG);</span><br><span class=\"line\">           canvas.clipRect(mScrollX + mPaddingLeft, mScrollY + mPaddingTop,</span><br><span class=\"line\">                   mScrollX + mRight - mLeft - mPaddingRight,</span><br><span class=\"line\">                   mScrollY + mBottom - mTop - mPaddingBottom);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// We will draw our child's animation, let's reset the flag</span></span><br><span class=\"line\">       mPrivateFlags &amp;= ~PFLAG_DRAW_ANIMATION;</span><br><span class=\"line\">       mGroupFlags &amp;= ~FLAG_INVALIDATE_REQUIRED;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> more = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> drawingTime = getDrawingTime();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (usingRenderNodeProperties) canvas.insertReorderBarrier();</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> transientCount = mTransientIndices == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : mTransientIndices.size();</span><br><span class=\"line\">       <span class=\"keyword\">int</span> transientIndex = transientCount != <span class=\"number\">0</span> ? <span class=\"number\">0</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"comment\">// Only use the preordered list if not HW accelerated, since the HW pipeline will do the</span></span><br><span class=\"line\">       <span class=\"comment\">// draw reordering internally</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> ArrayList&lt;View&gt; preorderedList = usingRenderNodeProperties</span><br><span class=\"line\">               ? <span class=\"keyword\">null</span> : buildOrderedChildList();</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> customOrder = preorderedList == <span class=\"keyword\">null</span></span><br><span class=\"line\">               &amp;&amp; isChildrenDrawingOrderEnabled();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (transientIndex &gt;= <span class=\"number\">0</span> &amp;&amp; mTransientIndices.get(transientIndex) == i) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> View transientChild = mTransientViews.get(transientIndex);</span><br><span class=\"line\">               <span class=\"keyword\">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</span><br><span class=\"line\">                       transientChild.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               transientIndex++;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (transientIndex &gt;= transientCount) &#123;</span><br><span class=\"line\">                   transientIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);</span><br><span class=\"line\">           <span class=\"keyword\">final</span> View child = getAndVerifyPreorderedView(preorderedList, children, childIndex);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               more |= drawChild(canvas, child, drawingTime);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (transientIndex &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// there may be additional transient views after the normal views</span></span><br><span class=\"line\">           <span class=\"keyword\">final</span> View transientChild = mTransientViews.get(transientIndex);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</span><br><span class=\"line\">                   transientChild.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           transientIndex++;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (transientIndex &gt;= transientCount) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (preorderedList != <span class=\"keyword\">null</span>) preorderedList.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Draw any disappearing views that have animations</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (mDisappearingChildren != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> ArrayList&lt;View&gt; disappearingChildren = mDisappearingChildren;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> disappearingCount = disappearingChildren.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">           <span class=\"comment\">// Go backwards -- we may delete as animations finish</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = disappearingCount; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> View child = disappearingChildren.get(i);</span><br><span class=\"line\">               more |= drawChild(canvas, child, drawingTime);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (usingRenderNodeProperties) canvas.insertInorderBarrier();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (debugDraw()) &#123;</span><br><span class=\"line\">           onDebugDraw(canvas);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (clipToPadding) &#123;</span><br><span class=\"line\">           canvas.restoreToCount(clipSaveCount);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// mGroupFlags might have been updated by drawChild()</span></span><br><span class=\"line\">       flags = mGroupFlags;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((flags &amp; FLAG_INVALIDATE_REQUIRED) == FLAG_INVALIDATE_REQUIRED) &#123;</span><br><span class=\"line\">           invalidate(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((flags &amp; FLAG_ANIMATION_DONE) == <span class=\"number\">0</span> &amp;&amp; (flags &amp; FLAG_NOTIFY_ANIMATION_LISTENER) == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">               mLayoutAnimationController.isDone() &amp;&amp; !more) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// We want to erase the drawing cache and notify the listener after the</span></span><br><span class=\"line\">           <span class=\"comment\">// next frame is drawn because one extra invalidate() is caused by</span></span><br><span class=\"line\">           <span class=\"comment\">// drawChild() after the animation is over</span></span><br><span class=\"line\">           mGroupFlags |= FLAG_NOTIFY_ANIMATION_LISTENER;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> Runnable end = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">              <span class=\"meta\">@Override</span></span><br><span class=\"line\">              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                  notifyAnimationListener();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           post(end);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Draw &#123;<span class=\"doctag\">@link</span> View#isAutofilled()&#125; highlight over view if the view is autofilled.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> canvas The canvas to draw on</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawAutofilledHighlight</span><span class=\"params\">(@NonNull Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (isAutofilled()) &#123;</span><br><span class=\"line\">           Drawable autofilledHighlight = getAutofilledDrawable();</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (autofilledHighlight != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               autofilledHighlight.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getWidth(), getHeight());</span><br><span class=\"line\">               autofilledHighlight.draw(canvas);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-绘制渐变\"><a href=\"#5-绘制渐变\" class=\"headerlink\" title=\"5. 绘制渐变\"></a>5. 绘制渐变</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /sdk/sources/android-26/android/view/View.java</span></span><br><span class=\"line\">......</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Paint p = scrollabilityCache.paint;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Matrix matrix = scrollabilityCache.matrix;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Shader fade = scrollabilityCache.shader;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (drawTop) &#123;</span><br><span class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</span><br><span class=\"line\">          matrix.postTranslate(left, top);</span><br><span class=\"line\">          fade.setLocalMatrix(matrix);</span><br><span class=\"line\">          p.setShader(fade);</span><br><span class=\"line\">          canvas.drawRect(left, top, right, top + length, p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (drawBottom) &#123;</span><br><span class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * bottomFadeStrength);</span><br><span class=\"line\">          matrix.postRotate(<span class=\"number\">180</span>);</span><br><span class=\"line\">          matrix.postTranslate(left, bottom);</span><br><span class=\"line\">          fade.setLocalMatrix(matrix);</span><br><span class=\"line\">          p.setShader(fade);</span><br><span class=\"line\">          canvas.drawRect(left, bottom - length, right, bottom, p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (drawLeft) &#123;</span><br><span class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * leftFadeStrength);</span><br><span class=\"line\">          matrix.postRotate(-<span class=\"number\">90</span>);</span><br><span class=\"line\">          matrix.postTranslate(left, top);</span><br><span class=\"line\">          fade.setLocalMatrix(matrix);</span><br><span class=\"line\">          p.setShader(fade);</span><br><span class=\"line\">          canvas.drawRect(left, top, left + length, bottom, p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (drawRight) &#123;</span><br><span class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * rightFadeStrength);</span><br><span class=\"line\">          matrix.postRotate(<span class=\"number\">90</span>);</span><br><span class=\"line\">          matrix.postTranslate(right, top);</span><br><span class=\"line\">          fade.setLocalMatrix(matrix);</span><br><span class=\"line\">          p.setShader(fade);</span><br><span class=\"line\">          canvas.drawRect(right - length, top, right, bottom, p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      canvas.restoreToCount(saveCount);</span><br><span class=\"line\"></span><br><span class=\"line\">      drawAutofilledHighlight(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Overlay is part of the content and draws beneath Foreground</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mOverlay != <span class=\"keyword\">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class=\"line\">          mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-绘制装饰附加内容\"><a href=\"#6-绘制装饰附加内容\" class=\"headerlink\" title=\"6. 绘制装饰附加内容\"></a>6. 绘制装饰附加内容</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* // /sdk/sources/android-26/android/view/View.java</span></span><br><span class=\"line\"><span class=\"comment\">   * Draw any foreground content for this view.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;p&gt;Foreground content may consist of scroll bars, a &#123;<span class=\"doctag\">@link</span> #setForeground foreground&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   * drawable or other view-specific decorations. The foreground is drawn on top of the</span></span><br><span class=\"line\"><span class=\"comment\">   * primary view content.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> canvas canvas to draw into</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawForeground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">      onDrawScrollIndicators(canvas);</span><br><span class=\"line\">      onDrawScrollBars(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">final</span> Drawable foreground = mForegroundInfo != <span class=\"keyword\">null</span> ? mForegroundInfo.mDrawable : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (mForegroundInfo.mBoundsChanged) &#123;</span><br><span class=\"line\">              mForegroundInfo.mBoundsChanged = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">final</span> Rect selfBounds = mForegroundInfo.mSelfBounds;</span><br><span class=\"line\">              <span class=\"keyword\">final</span> Rect overlayBounds = mForegroundInfo.mOverlayBounds;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (mForegroundInfo.mInsidePadding) &#123;</span><br><span class=\"line\">                  selfBounds.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getWidth(), getHeight());</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  selfBounds.set(getPaddingLeft(), getPaddingTop(),</span><br><span class=\"line\">                          getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ld = getLayoutDirection();</span><br><span class=\"line\">              Gravity.apply(mForegroundInfo.mGravity, foreground.getIntrinsicWidth(),</span><br><span class=\"line\">                      foreground.getIntrinsicHeight(), selfBounds, overlayBounds, ld);</span><br><span class=\"line\">              foreground.setBounds(overlayBounds);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          foreground.draw(canvas);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<hr>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjf0v9p060000m84lm8qh33w7","category_id":"cjf0v9p0c0002m84l8t19pvn3","_id":"cjf0v9p0g0006m84l0dikr2fh"},{"post_id":"cjf0v9p0a0001m84ldumn2u6f","category_id":"cjf0v9p0c0002m84l8t19pvn3","_id":"cjf0v9p0h0008m84l5ttxurne"}],"PostTag":[{"post_id":"cjf0v9p060000m84lm8qh33w7","tag_id":"cjf0v9p0d0003m84lvbs0fu4y","_id":"cjf0v9p0i000am84l01zlg0lg"},{"post_id":"cjf0v9p060000m84lm8qh33w7","tag_id":"cjf0v9p0e0005m84ldikd0btm","_id":"cjf0v9p0i000bm84l9ilzcb0y"},{"post_id":"cjf0v9p060000m84lm8qh33w7","tag_id":"cjf0v9p0g0007m84lvd6rr0lr","_id":"cjf0v9p0i000dm84l3ohp2ejk"},{"post_id":"cjf0v9p0a0001m84ldumn2u6f","tag_id":"cjf0v9p0d0003m84lvbs0fu4y","_id":"cjf0v9p0j000gm84law4izitt"},{"post_id":"cjf0v9p0a0001m84ldumn2u6f","tag_id":"cjf0v9p0i000cm84lyhx1a1ml","_id":"cjf0v9p0j000hm84lumeucm80"},{"post_id":"cjf0v9p0a0001m84ldumn2u6f","tag_id":"cjf0v9p0j000em84le1o9wxfq","_id":"cjf0v9p0k000im84l99f5vtas"},{"post_id":"cjf0v9p0a0001m84ldumn2u6f","tag_id":"cjf0v9p0g0007m84lvd6rr0lr","_id":"cjf0v9p0k000jm84lgy4h6bf9"}],"Tag":[{"name":"android","_id":"cjf0v9p0d0003m84lvbs0fu4y"},{"name":"Canvas","_id":"cjf0v9p0e0005m84ldikd0btm"},{"name":"绘制","_id":"cjf0v9p0g0007m84lvd6rr0lr"},{"name":"测量","_id":"cjf0v9p0i000cm84lyhx1a1ml"},{"name":"布局","_id":"cjf0v9p0j000em84le1o9wxfq"}]}}